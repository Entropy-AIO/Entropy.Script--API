<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Entropy.SDK</name>
  </assembly>
  <members>
    <member name="T:Entropy.SDK.Caching.ObjectCache">
      <summary>
                Class ObjectCache.
            </summary>
      <remarks>
                Members in the list may be invalid. Always check the <see cref="P:Entropy.GameObject.IsValid" /> property
                before use.
            </remarks>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllGameObjects">
      <summary>
                Gets all game objects.
            </summary>
      <value>All game objects.</value>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllMinions">
      <summary>
                Gets the minions.
            </summary>
      <value>The minions.</value>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllyHeroes">
      <summary>
                Gets the ally heroes.
            </summary>
      <value>The ally heroes.</value>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllyMinions">
      <summary>
                Gets the ally minions.
            </summary>
      <value>The ally minions.</value>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllyTurrets">
      <summary>
                Gets the ally turrets.
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllAttackableObjects">
      <summary>
                Position all AttackableObjects
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.EnemyHeroes">
      <summary>
                Gets the enemy heroes.
            </summary>
      <value>The enemy heroes.</value>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.EnemyMinions">
      <summary>
                Gets the enemy minions.
            </summary>
      <value>The enemy minions.</value>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.EnemyPets">
      <summary>
                Gets the enemy pets.
            </summary>
      <value>The enemy pets.</value>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllyPets">
      <summary>
                Gets the ally pets.
            </summary>
      <value>The ally pets.</value>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.EnemyTurrets">
      <summary>
                Position the enemy turrets
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.EnemyStructures">
      <summary>
                Position the enemy structures
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllHeroes">
      <summary>
                Gets the heroes.
            </summary>
      <value>The heroes.</value>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllTurrets">
      <summary>
                Gets all the turrets.
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllShops">
      <summary>
                Gets all the shops
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllParticles">
      <summary>
                Position all ParticleEmmitters
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.EnemyLaneMinions">
      <summary>
                Gets the enemy lane minions
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllyLaneMinions">
      <summary>
                Gets the ally lane minions
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.LaneMinions">
      <summary>
                Gets all the lane minions
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.JungleMinions">
      <summary>
                Gets all the jungle minions
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.SmallJungleMinions">
      <summary>
                Gets all the small jungle minions
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.LargeJungleMinions">
      <summary>
                Gets all the large jungle minions
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.LegendaryJungleMinions">
      <summary>
                Gets all the large jungle minions
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllWards">
      <summary>
                Gets all the wards
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllPlants">
      <summary>
                Gets all the plants
            </summary>
    </member>
    <member name="P:Entropy.SDK.Caching.ObjectCache.AllAiBaseClients">
      <summary>
                Gets all the AiBaseClients
            </summary>
    </member>
    <member name="F:Entropy.SDK.Caching.ObjectCache.Barrels">
      <summary>
                Gets all the barrels
            </summary>
    </member>
    <member name="F:Entropy.SDK.Caching.ObjectCache.YasuoWalls">
      <summary>
                Gets all the windwalls
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.Utilities.TearLikeItems">
      <summary>
                Gets the tear-like items.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.Utilities.AABlockingBuffNames">
      <summary>
                Array containing names of autoattack blocking buff names
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.Utilities.GrabsNames">
      <summary>
                Array containing all names of hooking spells (E.g Blitzcrank's Q)
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.Utilities.SpellSlots">
      <summary>
                Array containing champion abilities spellslots
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.Utilities.SummonerSpellSlots">
      <summary>
                Array containing summoner spells spellslots
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.Utilities.ChangeStanceChampions">
      <summary>
                Array containing champions who change their stance (E.g Jayce R)
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.Utilities.EmpoweringAABuffNames">
      <summary>
                Array containing buff names that empower autoattacks 
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.Utilities.HPHealingPotionBuffNames">
      <summary>
                Array containing buff names of HP potions of any kind
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.Utilities.MPHealingPotionBuffNames">
      <summary>
                Array containing buff names of MP potions of any kind
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.Pets">
      <summary>
                List containing pets names
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.Plants">
      <summary>
                List containing plants names
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.JungleCamps">
      <summary>
                Array containing names of Summoners Rift jungle camps
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.NexusBlitzJungleCamps">
      <summary>
                Array containing names of Nexus Blitz large and legendary jungle camps
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.AllNexusBlitzJungleMinionsNames">
      <summary>
                Array containing names of Nexus Blitz all jungle camps
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.LargeNexusBlitzJungleMinionNames">
      <summary>
                Array containing names of Nexus Blitz large jungle camps
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.LegendaryNexusBlitzJungleMinionNames">
      <summary>
                Array containing names of Nexus Blitz legendary jungle camps
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.SmallNexusBlitzJungleMinionNames">
      <summary>
                Array containing names of Nexus Blitz small jungle camps
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.AllJungleMinionsNames">
      <summary>
                Array containing names of all Summoners Rift jungle camps
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.LargeJungleMinionNames">
      <summary>
                Array containing names of Summoners Rift large jungle minions
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.LegendaryJungleMinionNames">
      <summary>
                Array containing names of Summoners Rift large jungle minions
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.SmallJungleMinionNames">
      <summary>
                Array containing names of Summoners Rift small jungle minions
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.Wards">
      <summary>
                List containing ward names
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.HeimerdingerTurrets">
      <summary>
                List containing Heimerdinger's turrets names
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.ZyraPlants">
      <summary>
                List containing Zyra's plants names
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.NotLaneMinion">
      <summary>
                List containing special names of objects created by champions (E.g Syndra's Q or Jarvan's E)
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.FirstTierBotLaneTowers">
      <summary>
                List containing names of first tier botlane towers
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.SecondTierBotLaneTowers">
      <summary>
                List containing names of second tier botlane towers
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.ThirdTierBotLaneTowers">
      <summary>
                List containing names of third tier botlane towers
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.FirstTierMidLaneTowers">
      <summary>
                List containing names of first tier midlane towers
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.SecondTierMidLaneTowers">
      <summary>
                List containing names of second tier midlane towers
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.ThirdTierMidLaneTowers">
      <summary>
                List containing names of third tier midlane towers
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.FirstTierTopLaneTowers">
      <summary>
                List containing names of first tier toplane towers
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.SecondTierTopLaneTowers">
      <summary>
                List containing names of second tier toplane towers
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.ThirdTierTopLaneTowers">
      <summary>
                List containing names of third tier toplane towers
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.NexusTowers">
      <summary>
                List containing names of Nexus Blitz tower names
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.FirstTierTurrets">
      <summary>
                List containing all names of first tier towers
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.SecondTierTurrets">
      <summary>
                List containing all names of second tier towers
            </summary>
    </member>
    <member name="F:Entropy.SDK.Constants.ObjectNames.ThirdTierTurrets">
      <summary>
                List containing all names of third tier towers
            </summary>
    </member>
    <member name="P:Entropy.SDK.Damage.DamagePerks.Perks">
      <summary>
                The perks entries.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Damage.DamagePerks.ComputePerkDamages(Entropy.AIHeroClient,Entropy.AIBaseClient)">
      <summary>
                Computes all of the runes (perks) damages dealt to target
            </summary>
      <param name="source">
      </param>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.Damage.Invulnerable">
      <summary>
                Invulnerable utility class
            </summary>
    </member>
    <member name="M:Entropy.SDK.Damage.Invulnerable.IsInvulnerable(Entropy.AIBaseClient,System.Boolean,System.Single)">
      <summary>
                Checks if the specified target is invulnerable.
            </summary>
      <param name="unit">The target.</param>
      <param name="damageType">Type of the damage.</param>
      <param name="ignoreSpellShields">if set to <c>true</c> ignores the spellshields.</param>
      <param name="damage">The damage.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.Damage.Invulnerability">
      <summary>
                Entry for <see cref="T:Entropy.SDK.Damage.Invulnerable" /> class.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Damage.Invulnerability.BuffName">
      <summary>
                Gets the name of the buff.
            </summary>
      <value>
                The name of the buff.
            </value>
    </member>
    <member name="F:Entropy.SDK.Damage.Invulnerability.CharName">
      <summary>
                Gets or sets the champion name.
            </summary>
      <value>
                The champion name.
            </value>
    </member>
    <member name="F:Entropy.SDK.Damage.Invulnerability.DamageType">
      <summary>
                Gets or sets the type of the damage.
            </summary>
      <value>
                The type of the damage.
            </value>
    </member>
    <member name="F:Entropy.SDK.Damage.Invulnerability.IsSpellShield">
      <summary>
                Gets or sets a value indicating whether this is a spellshield.
            </summary>
      <value>
        <c>true</c> if this is a spellshield; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:Entropy.SDK.Damage.Invulnerability.MinHealth">
      <summary>
                Gets or sets the minimum health.
            </summary>
      <value>
                The minimum health percent.
            </value>
    </member>
    <member name="F:Entropy.SDK.Damage.Invulnerability.MinHealthPercent">
      <summary>
                Gets or sets the minimum health percent.
            </summary>
      <value>
                The minimum health percent.
            </value>
    </member>
    <member name="T:Entropy.SDK.Damage.Damage">
      <summary>
                Class Damage.
            </summary>
    </member>
    <member name="T:Entropy.SDK.Damage.Damage.DamageDelegate">
      <summary>
                It will return a float damage multiplier
            </summary>
      <param name="source">
      </param>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Damage.Damage.CalculateDamage(Entropy.AIBaseClient,Entropy.AIBaseClient,Entropy.DamageType,System.Single)">
      <summary>
                Calculates the damage.
            </summary>
      <param name="source">The source.</param>
      <param name="target">The target.</param>
      <param name="damageType">Type of the damage.</param>
      <param name="amount">The amount.</param>
      <returns>System.Double.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">damageType - null</exception>
    </member>
    <member name="M:Entropy.SDK.Damage.Damage.CalculateMixedDamage(Entropy.AIBaseClient,Entropy.AIBaseClient,System.Single,System.Single)">
      <summary>
                Calculates the mixed damage.
            </summary>
      <param name="source">The source.</param>
      <param name="target">The target.</param>
      <param name="physicalAmount">The physical amount.</param>
      <param name="magicalAmount">The magical amount.</param>
      <returns>System.Double.</returns>
    </member>
    <member name="M:Entropy.SDK.Damage.Damage.AddBonusLocalPlayerAutoAttackDamage(Entropy.SDK.Damage.Damage.BonusLocalPlayerAutoAttackDamageDelegate)">
      <summary>
                Adds local player's bonus autoattack damage
            </summary>
      <param name="del">
      </param>
    </member>
    <member name="M:Entropy.SDK.Damage.Damage.RemoveBonusLocalPlayerAutoAttackDamage(Entropy.SDK.Damage.Damage.BonusLocalPlayerAutoAttackDamageDelegate)">
      <summary>
                Removes local player's bonus autoattack damage
            </summary>
      <param name="del">
      </param>
    </member>
    <member name="M:Entropy.SDK.Damage.Damage.GetAutoAttackDamage(Entropy.AIBaseClient,Entropy.AIBaseClient)">
      <summary>
                Gets the automatic attack damage.
            </summary>
      <param name="source">The source.</param>
      <param name="target">The target.</param>
      <returns>System.Double.</returns>
    </member>
    <member name="M:Entropy.SDK.Damage.Damage.AccountOnHitItemDamages(Entropy.AIHeroClient,Entropy.AIBaseClient)">
      <summary>
                Calculates on hit damage to the target
            </summary>
      <param name="hero">
      </param>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Entropy.SDK.Databases.Buffs.CrowdControlBuffs.Data">
      <summary>
                Dictionary containing all of the crowd control data (Uses CharName as key)
            </summary>
    </member>
    <member name="F:Entropy.SDK.Databases.Buffs.InvulnerableBuffs.Data">
      <summary>
                Dictionary containing invulerable buffs data (Uses exact buff's name as the key)
            </summary>
    </member>
    <member name="F:Entropy.SDK.Databases.Damages.Passives.Database">
      <summary>
                Hashset containing jungle minions and turrets reductions, damage amplifiers, minions exact damage and baron buffed minions damage
            </summary>
    </member>
    <member name="F:Entropy.SDK.Databases.EvadeSpells.EvadeSpellDatabase.Spells">
      <summary>
                List containing all spells used for evading
            </summary>
    </member>
    <member name="F:Entropy.SDK.Databases.DefensiveSpellsDatabase.DefensiveSpells">
      <summary>
                List containing all of the defensive spells
            </summary>
    </member>
    <member name="M:Entropy.SDK.Databases.DefensiveSpellsDatabase.GetDefensiveSpells(Entropy.AIHeroClient)">
      <summary>
                List containing defensive spells of this hero
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Entropy.SDK.Databases.JungleCamps.Data">
      <summary>
                List containing jungle camps data
            </summary>
    </member>
    <member name="F:Entropy.SDK.Databases.GrassPolygonDatabase.GrassPolygons">
      <summary>
                List containing hulls of grass positions
            </summary>
    </member>
    <member name="F:Entropy.SDK.Databases.Skillshots.SkillshotData.IsDangerous">
      <summary>
                Spell apply any kind of CC
            </summary>
    </member>
    <member name="F:Entropy.SDK.Databases.Skillshots.SkillshotDatabase.Spells">
      <summary>
                Hashset containing skillshot type of spells data
            </summary>
    </member>
    <member name="M:Entropy.SDK.Databases.Skillshots.SkillshotDatabaseExtensions.GetBySourceObjectName(System.Collections.Generic.IEnumerable{Entropy.SDK.Databases.Skillshots.SkillshotData},System.String)">
      <summary>
                Gets skillshot data by searching for source object's name
            </summary>
      <param name="spells">
      </param>
      <param name="objectName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Databases.Skillshots.SkillshotDatabaseExtensions.GetByName(System.Collections.Generic.IEnumerable{Entropy.SDK.Databases.Skillshots.SkillshotData},System.String)">
      <summary>
                Gets skillshot data by searching for spell's name
            </summary>
      <param name="spells">
      </param>
      <param name="spellName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Databases.Skillshots.SkillshotDatabaseExtensions.GetByMissileName(System.Collections.Generic.IEnumerable{Entropy.SDK.Databases.Skillshots.SkillshotData},System.String)">
      <summary>
                Gets skillshot data by searching for missile's name
            </summary>
      <param name="spells">
      </param>
      <param name="missileSpellName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Databases.Skillshots.SkillshotDatabaseExtensions.GetByParticleEmitterName(System.Collections.Generic.IEnumerable{Entropy.SDK.Databases.Skillshots.SkillshotData},System.String)">
      <summary>
                Gets skillshot data by searching for particle emitter's name
            </summary>
      <param name="spells">
      </param>
      <param name="particleEmitterName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Databases.Skillshots.SkillshotDatabaseExtensions.GetBySpeed(System.Collections.Generic.IEnumerable{Entropy.SDK.Databases.Skillshots.SkillshotData},System.String,System.Int32,System.Int32)">
      <summary>
                Gets skillshot data by its speed
            </summary>
      <param name="spells">
      </param>
      <param name="CharName">
      </param>
      <param name="speed">
      </param>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Databases.Skillshots.SkillshotDatabaseExtensions.GetSkillshotData(Entropy.SpellDataInst)">
      <summary>
                Gets skillshot data by its spell data
            </summary>
      <param name="instance">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Databases.SummonerSpells.GetSummonerSpell(Entropy.SDK.Enumerations.SummonerSpell)">
      <summary>
                Gets summoner spell
            </summary>
      <param name="spell">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.DataDragon.Extensions.ChampionDataEx.GetSpell(Entropy.SDK.DataDragon.JSON.Entities.ChampionData,Entropy.SpellSlot)">
      <summary>
                Gets spell data by spellslot from DDragon database of this champion
            </summary>
      <param name="championD">
      </param>
      <param name="spellSlot">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.DataDragon.Extensions.ChampionDataEx.GetSkins(Entropy.SDK.DataDragon.JSON.Entities.ChampionData)">
      <summary>
                Gets all of the skins of this champion from DDragon database
            </summary>
      <param name="championD">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Entropy.SDK.DataDragon.DDragon.AllChampionsData">
      <summary>
                Dictionary containing all of the champions data
            </summary>
    </member>
    <member name="M:Entropy.SDK.DataDragon.PathManager.GetChampionDataFilePath(Entropy.SDK.Enumerations.Champion)">
      <summary>
                Gets champion data file path by champion
            </summary>
      <param name="championName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.None">
      <summary>
                No flag set, same as null
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.Fast">
      <summary>
                never null as castposition but beware low hitchance
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.MultiHit">
      <summary>
                multi hit, otherwise collision will stop at the first target hit
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.CollidesUnit">
      <summary>
                collides with heroes and minions
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.CollidesAny">
      <summary>
                collides with heroes, minions, braumshield and windwall
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.CollidesHero">
      <summary>
                collides with heroes
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.CollidesMinion">
      <summary>
                collides with minions
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.CollidesWindwall">
      <summary>
                collides with windwall
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.CollidesWall">
      <summary>
                use if you do not want to hit a wall
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.CollidesStructure">
      <summary>
                use if you do not want to hit a structure
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.CollidesBraumshield">
      <summary>
                collides with braumshield
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.DisableRadiusMod">
      <summary>
                use if you want to cast dead center
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.BoundingRadiusMod">
      <summary>
                use if bounding radius should be added to radius
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.CollidesSpellWall">
      <summary>
                collides with windwall and braumshield
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.AreaOfEffect">
      <summary>
                "aoe" spells
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.PredictionFlags.Wall">
      <summary>
                use if you want to hit a wall
            </summary>
    </member>
    <member name="T:Entropy.SDK.Enumerations.CollisionableObjects">
      <summary>
                Enum CollisionableObjects
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.CollisionableObjects.Minions">
      <summary>
                Minion Collision-able Flag
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.CollisionableObjects.Heroes">
      <summary>
                Hero Collision-able Flag
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.CollisionableObjects.YasuoWall">
      <summary>
                Yasuo's Wall Collision-able Flag
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.CollisionableObjects.BraumShield">
      <summary>
                Braum's Shield Collision-able Flag
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.CollisionableObjects.Walls">
      <summary>
                Wall Collision-able Flag
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.CollisionableObjects.Allies">
      <summary>
                Wall Collision-able Flag
            </summary>
    </member>
    <member name="T:Entropy.SDK.Enumerations.ObjectTeam">
      <summary>
                Represents a GameObject team
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.ObjectTeam.Unknown">
      <summary>
                The unknown team
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.ObjectTeam.Neutral">
      <summary>
                The neutral team
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.ObjectTeam.Ally">
      <summary>
                The ally team
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.ObjectTeam.Enemy">
      <summary>
                The enemy team
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.OrbwalkingMode.None">
      <summary>
                Orbwalker does nothing.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.OrbwalkingMode.Combo">
      <summary>
                Orbwalker will attack the target.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.OrbwalkingMode.Harass">
      <summary>
                Orbwalker will auto attack the target and last hit minions.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.OrbwalkingMode.Laneclear">
      <summary>
                Orbwalker will clear lane minions as fast as possible.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.OrbwalkingMode.Lasthit">
      <summary>
                Orbwalker will only last hit minions.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Enumerations.OrbwalkingMode.Custom">
      <summary>
                Orbwalker will be in a custom mode.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Events.Gapcloser.Spells">
      <summary>
                List containing all of the gapcloser spells
            </summary>
    </member>
    <member name="E:Entropy.SDK.Events.Gapcloser.OnNewGapcloser">
      <summary>
                Occurs when objects uses gapcloser
            </summary>
    </member>
    <member name="M:Entropy.SDK.Events.Gapcloser.GetGapcloserInfo(Entropy.GameObject)">
      <summary>
                Gets gapcloser information of this object
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Entropy.SDK.Events.Dash.DashArgs.Duration">
      <summary>
                Gets or sets the dash duration.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Events.Dash.DashArgs.EndPosition">
      <summary>
                Gets or sets the end position.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Events.Dash.DashArgs.EndTick">
      <summary>
                Gets or sets the end tick.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Events.Dash.DashArgs.IsBlink">
      <summary>
                Gets or sets a value indicating whether is blink.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Events.Dash.DashArgs.Path">
      <summary>
                Gets or sets the path.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Events.Dash.DashArgs.Sender">
      <summary>
                Gets or sets the sender.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Events.Dash.DashArgs.Speed">
      <summary>
                Gets or sets the speed.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Events.Dash.DashArgs.StartPosition">
      <summary>
                Gets or sets the start position.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Events.Dash.DashArgs.StartTick">
      <summary>
                Gets or sets the start tick.
            </summary>
    </member>
    <member name="P:Entropy.SDK.Events.Dash.DashArgs.TicksLeft">
      <summary>
                Gets ticks left.
            </summary>
    </member>
    <member name="E:Entropy.SDK.Events.Dash.OnNewDash">
      <summary>
                Occurs when object starts a dash
            </summary>
    </member>
    <member name="E:Entropy.SDK.Events.Dash.OnDashDelete">
      <summary>
                Occurs when object ends a dash
            </summary>
    </member>
    <member name="M:Entropy.SDK.Events.Dash.GetDashInfo(Entropy.AIBaseClient)">
      <summary>
                Gets dash information of this object
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Events.Dash.IsDashing(Entropy.AIBaseClient)">
      <summary>
                Informs if object finished the dash
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.Events.Delegates.BoolValueChangedHandler">
      <summary>
                The Value Changed Event Handler
            </summary>
      <param name="sender">The sender.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="T:Entropy.SDK.Events.Delegates.ColorValueChangedHandler">
      <summary>
                The Value Changed Event Handler
            </summary>
      <param name="sender">The sender.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="T:Entropy.SDK.Events.Delegates.IntValueChangedHandler">
      <summary>
                The Value Changed Event Handler
            </summary>
      <param name="sender">The sender.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="F:Entropy.SDK.Events.Interrupter.SpellDatabase">
      <summary>
                Dictionary containing list of all interruptable spells
            </summary>
    </member>
    <member name="E:Entropy.SDK.Events.Interrupter.OnInterruptableSpell">
      <summary>
                Occurs when object uses interruptable spell
            </summary>
    </member>
    <member name="T:Entropy.SDK.Events.Loading">
      <summary>
                Class GameEvents.
            </summary>
    </member>
    <member name="T:Entropy.SDK.Events.Loading.OnLoadingCompleteDelegate">
      <summary>
                The GameStart Delegate
            </summary>
    </member>
    <member name="E:Entropy.SDK.Events.Loading.OnLoadingComplete">
      <summary>
                Occurs when the game is started.
            </summary>
    </member>
    <member name="E:Entropy.SDK.Events.Recall.OnNewRecall">
      <summary>
                Occurs when champion is recalling
            </summary>
    </member>
    <member name="E:Entropy.SDK.Events.Recall.OnRecallRemove">
      <summary>
                Occurs when recall is aborted or finished
            </summary>
    </member>
    <member name="E:Entropy.SDK.Events.Shield.OnShieldableSpell">
      <summary>
                Occurs when shield spell has been cast
            </summary>
    </member>
    <member name="E:Entropy.SDK.Events.Teleports.OnTeleport">
      <summary>
                Occurs when a teleport status is updated
            </summary>
    </member>
    <member name="E:Entropy.SDK.Events.Tick.OnTick">
      <summary>
                Occurs each tick
            </summary>
    </member>
    <member name="M:Entropy.SDK.Extensions.ColorConversion.ToHex(SharpDX.Color)">
      <summary>
                Converts SharpDX color to hex
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.ColorConversion.ToHex(System.Drawing.Color)">
      <summary>
                Converts system color to hex
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.ColorConversion.ToSharpDXColor(System.Drawing.Color)">
      <summary>
                Converts SystemColor to SharpDX color
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.ColorConversion.ToSystemColor(SharpDX.Color)">
      <summary>
                Converts SharpDX color to SystemColor color
            </summary>
      <param name="color">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.ColorConversion.HSL2RGB(System.Double,System.Double,System.Double)">
      <summary>
                Converts HSL to RBG
            </summary>
      <param name="h">
      </param>
      <param name="sl">
      </param>
      <param name="l">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.Extensions.ConcurrentHashSet`1">
      <summary> 
            Represents a thread-safe hash-based unique collection. 
            </summary>
      <typeparam name="T">The type of the items in the collection.</typeparam>
      <remarks> 
            All public members of <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> are thread-safe and may be used 
            concurrently from multiple threads. 
            </remarks>
    </member>
    <member name="P:Entropy.SDK.Extensions.ConcurrentHashSet`1.Count">
      <summary> 
            Gets the number of items contained in the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />. 
            </summary>
      <value>The number of items contained in the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />.</value>
      <remarks>Count has snapshot semantics and represents the number of items in the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> 
            at the moment when Count was accessed.</remarks>
    </member>
    <member name="P:Entropy.SDK.Extensions.ConcurrentHashSet`1.IsEmpty">
      <summary> 
            Gets a value that indicates whether the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> is empty. 
            </summary>
      <value>true if the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> is empty; otherwise, 
            false.</value>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.#ctor">
      <summary> 
            Initializes a new instance of the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> 
            class that is empty, has the default concurrency level, has the default initial capacity, and 
            uses the default comparer for the item type. 
            </summary>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.#ctor(System.Int32,System.Int32)">
      <summary> 
            Initializes a new instance of the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> 
            class that is empty, has the specified concurrency level and capacity, and uses the default 
            comparer for the item type. 
            </summary>
      <param name="concurrencyLevel">The estimated number of threads that will update the 
            <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> concurrently.</param>
      <param name="capacity">The initial number of elements that the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> 
            can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> is 
            less than 1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 
            0.</exception>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary> 
            Initializes a new instance of the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> 
            class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable{T}" />, has the default concurrency 
            level, has the default initial capacity, and uses the default comparer for the item type. 
            </summary>
      <param name="collection">The <see cref="T:System.Collections.IEnumerable{T}" /> whose elements are copied to 
            the new 
            <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is a null reference.</exception>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary> 
            Initializes a new instance of the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> 
            class that is empty, has the specified concurrency level and capacity, and uses the specified 
            <see cref="T:System.Collections.Generic.IEqualityComparer{T}" />. 
            </summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{T}" /> 
            implementation to use when comparing items.</param>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary> 
            Initializes a new instance of the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> 
            class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable" />, has the default concurrency level, has the default 
            initial capacity, and uses the specified 
            <see cref="T:System.Collections.Generic.IEqualityComparer{T}" />. 
            </summary>
      <param name="collection">The <see cref="T:System.Collections.IEnumerable{T}" /> whose elements are copied to 
            the new 
            <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{T}" /> 
            implementation to use when comparing items.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is a null reference 
            (Nothing in Visual Basic). 
            </exception>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary> 
            Initializes a new instance of the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />  
            class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable" />,  
            has the specified concurrency level, has the specified initial capacity, and uses the specified  
            <see cref="T:System.Collections.Generic.IEqualityComparer{T}" />. 
            </summary>
      <param name="concurrencyLevel">The estimated number of threads that will update the  
            <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> concurrently.</param>
      <param name="collection">The <see cref="T:System.Collections.IEnumerable{T}" /> whose elements are copied to the new  
            <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{T}" /> implementation to use  
            when comparing items.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is a null reference. 
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> is less than 1. 
            </exception>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary> 
            Initializes a new instance of the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> 
            class that is empty, has the specified concurrency level, has the specified initial capacity, and 
            uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer{T}" />. 
            </summary>
      <param name="concurrencyLevel">The estimated number of threads that will update the 
            <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> concurrently.</param>
      <param name="capacity">The initial number of elements that the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> 
            can contain.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer{T}" /> 
            implementation to use when comparing items.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="concurrencyLevel" /> is less than 1. -or- 
            <paramref name="capacity" /> is less than 0. 
            </exception>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.Add(`0)">
      <summary> 
            Adds the specified item to the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />. 
            </summary>
      <param name="item">The item to add.</param>
      <returns>true if the items was added to the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> 
            successfully; false if it already exists.</returns>
      <exception cref="T:System.OverflowException">The <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> 
            contains too many items.</exception>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.Clear">
      <summary> 
            Removes all items from the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />. 
            </summary>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.Contains(`0)">
      <summary> 
            Determines whether the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> contains the specified 
            item. 
            </summary>
      <param name="item">The item to locate in the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />.</param>
      <returns>true if the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" /> contains the item; otherwise, false.</returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.TryRemove(`0)">
      <summary> 
            Attempts to remove the item from the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />. 
            </summary>
      <param name="item">The item to remove.</param>
      <returns>true if an item was removed successfully; otherwise, false.</returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />.</summary>
      <returns>An enumerator for the <see cref="T:Entropy.SDK.Extensions.ConcurrentHashSet`1" />.</returns>
      <remarks> 
            The enumerator returned from the collection is safe to use concurrently with 
            reads and writes to the collection, however it does not represent a moment-in-time snapshot 
            of the collection.  The contents exposed through the enumerator may contain modifications 
            made to the collection after <see cref="M:Entropy.SDK.Extensions.ConcurrentHashSet`1.GetEnumerator" /> was called. 
            </remarks>
    </member>
    <member name="M:Entropy.SDK.Extensions.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                Returns the maximal element of the given sequence, based on
                the given projection.
            </summary>
      <remarks>
                If more than one element has the maximal projected value, the first
                one encountered will be returned. This overload uses the default comparer
                for the projected type. This operator uses immediate execution, but
                only buffers a single result (the current maximal element).
            </remarks>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <typeparam name="TKey">Type of the projected element</typeparam>
      <param name="source">Source sequence</param>
      <param name="selector">Selector to use to pick the results to compare</param>
      <returns>The maximal element, according to the projection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> is empty</exception>
    </member>
    <member name="M:Entropy.SDK.Extensions.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
                Returns the maximal element of the given sequence, based on
                the given projection and the specified comparer for projected values.
            </summary>
      <remarks>
                If more than one element has the maximal projected value, the first
                one encountered will be returned. This operator uses immediate execution, but
                only buffers a single result (the current maximal element).
            </remarks>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <typeparam name="TKey">Type of the projected element</typeparam>
      <param name="source">Source sequence</param>
      <param name="selector">Selector to use to pick the results to compare</param>
      <param name="comparer">Comparer to use to compare projected values</param>
      <returns>The maximal element, according to the projection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="selector" />
                or <paramref name="comparer" /> is null
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> is empty</exception>
    </member>
    <member name="M:Entropy.SDK.Extensions.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                Returns the minimal element of the given sequence, based on
                the given projection.
            </summary>
      <remarks>
                If more than one element has the minimal projected value, the first
                one encountered will be returned. This overload uses the default comparer
                for the projected type. This operator uses immediate execution, but
                only buffers a single result (the current minimal element).
            </remarks>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <typeparam name="TKey">Type of the projected element</typeparam>
      <param name="source">Source sequence</param>
      <param name="selector">Selector to use to pick the results to compare</param>
      <returns>The minimal element, according to the projection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> is empty</exception>
    </member>
    <member name="M:Entropy.SDK.Extensions.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
                Returns the minimal element of the given sequence, based on
                the given projection and the specified comparer for projected values.
            </summary>
      <remarks>
                If more than one element has the minimal projected value, the first
                one encountered will be returned. This operator uses immediate execution, but
                only buffers a single result (the current minimal element).
            </remarks>
      <typeparam name="TSource">Type of the source sequence</typeparam>
      <typeparam name="TKey">Type of the projected element</typeparam>
      <param name="source">Source sequence</param>
      <param name="selector">Selector to use to pick the results to compare</param>
      <param name="comparer">Comparer to use to compare projected values</param>
      <returns>The minimal element, according to the projection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="selector" />
                or <paramref name="comparer" /> is null
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> is empty</exception>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.CrossEx.Cross(SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
                Crosses two vectors
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.Directions.Direction(SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
                Gets direction of two vectors
            </summary>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.Directions.Direction(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Gets direction of two vectors
            </summary>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.Directions.Direction(Entropy.AIBaseClient,Entropy.SDK.Extensions.Geometry.Direction)">
      <summary>
                Left direction not supported
            </summary>
      <param name="target">
      </param>
      <param name="dir">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.IsOnScreenEx.IsOnScreen(SharpDX.Vector2)">
      <summary>
                Informs whether position is on the screen
            </summary>
      <param name="pos">screen-space position</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.IsVisibleOnTheScreenEx.IsVisibleOnTheScreen(SharpDX.Vector3)">
      <summary>
                Informs whether position is on the screen
            </summary>
      <param name="worldPosition">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.GetCentroidEx.GetCentroid(System.Collections.Generic.List{SharpDX.Vector2})">
      <summary>
                Gets centroid (center most vector) from vector list
            </summary>
      <param name="poly">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.GetCentroidEx.GetCentroid(Entropy.SDK.Geometry.LinearPolygon)">
      <summary>
                Gets centroid of line
            </summary>
      <param name="ch">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.RotatedAroundPoint.RotateAroundPoint(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
      </summary>
      <param name="point">
      </param>
      <param name="around">
      </param>
      <param name="angle">In radians</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.AngleBetweenEx.AngleBetween(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Gets the angle between <paramref name="self" />, the center, and two points.
            </summary>
      <param name="self">The self.</param>
      <param name="v1">The v1.</param>
      <param name="v2">The v2.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.AngleBetweenEx.AngleBetween(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Gets the angle between 2 vectors
            </summary>
      <returns>Returns the the angle in degrees between vector1 and vector2</returns>
      <param name="v1"> The first vector </param>
      <param name="v2"> The second vector </param>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.AngleBetweenEx.CircleCircleIntersection(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single)">
      <summary>
                Gets intersection between two circles
            </summary>
      <param name="center1">
      </param>
      <param name="center2">
      </param>
      <param name="radius1">
      </param>
      <param name="radius2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.CrossProductEx.CrossProduct(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Gets crossing product
            </summary>
      <param name="v1">
      </param>
      <param name="v2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.DegreeConversions.ToDegrees(System.Single)">
      <summary>
                Converts radians to degrees
            </summary>
      <param name="radians">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.DegreeConversions.ToRadians(System.Single)">
      <summary>
                Converts degrees to radians
            </summary>
      <param name="degrees">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.DistanceEx.DistanceSquared(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Boolean)">
      <summary>
                Gets distance squared from the segments.
            </summary>
      <param name="point">The point.</param>
      <param name="segmentStart">The segment start.</param>
      <param name="segmentEnd">The segment end.</param>
      <param name="onlyIfOnSegment">if set to <c>true</c> [only if on segment].</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.DistanceEx.Distance(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Boolean,System.Boolean)">
      <summary>
                Returns the distance to the line segment.
            </summary>
      <param name="point">The point.</param>
      <param name="segmentStart">The segment start.</param>
      <param name="segmentEnd">The segment end.</param>
      <param name="onlyIfOnSegment">if set to <c>true</c> [only if on segment].</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.FixHeightEx.FixHeight(SharpDX.Vector3)">
      <summary>
                Reduces vector's height (Y) to 0
            </summary>
      <param name="v1">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.Extensions.Geometry.IntersectionEx.IntersectionResult">
      <summary>
                Struct IntersectionResult
            </summary>
    </member>
    <member name="F:Entropy.SDK.Extensions.Geometry.IntersectionEx.IntersectionResult.Intersects">
      <summary>
                Returns if both of the points intersect.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Extensions.Geometry.IntersectionEx.IntersectionResult.Point">
      <summary>
                Intersection point
            </summary>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.IntersectionEx.IntersectionResult.#ctor(System.Boolean,SharpDX.Vector2)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Extensions.Geometry.IntersectionEx.IntersectionResult" /> struct.
                Constructor for Intersection Result
            </summary>
      <param name="intersects">
                Intersection of input
            </param>
      <param name="point">
                Intersection Point
            </param>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.RotatedEx.Rotated(SharpDX.Vector3,System.Single)">
      <summary>
                Rotates the Vector3 to a set angle.
            </summary>
      <param name="vector3">Extended SharpDX Vector2</param>
      <param name="angle">Angle (in radians)</param>
      <returns>Rotated Vector3</returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.RotatedEx.Rotated(SharpDX.Vector2,System.Single)">
      <summary>
                Rotates the Vector2 to a set angle.
            </summary>
      <param name="vector2">Extended Vector2</param>
      <param name="angle">Angle (in radians)</param>
      <returns>Rotated Vector2</returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.PerpendicularEx.Perpendicular(SharpDX.Vector2,System.Int32)">
      <summary>
                Creates a new vector perpendicular to <paramref name="vector2" /> and shifted by the specified offset.
            </summary>
      <param name="vector2">The vector2.</param>
      <param name="offset">The offset.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Geometry.PolarEx.Polar(SharpDX.Vector2)">
      <summary>
                Gets the polar angle.
            </summary>
      <param name="v">The v.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Entropy.SDK.Extensions.Geometry.Projection.ProjectionInfo.IsOnSegment">
      <summary>
                Returns if the point is on the segment
            </summary>
    </member>
    <member name="F:Entropy.SDK.Extensions.Geometry.Projection.ProjectionInfo.LinePoint">
      <summary>
                Line point
            </summary>
    </member>
    <member name="F:Entropy.SDK.Extensions.Geometry.Projection.ProjectionInfo.SegmentPoint">
      <summary>
                Segment point
            </summary>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.FontEx.MeasureSize(SharpDX.Direct3D9.Font,System.String,SharpDX.Direct3D9.FontDrawFlags)">
      <summary>
                Measures font size
            </summary>
      <param name="font">
      </param>
      <param name="text">
      </param>
      <param name="flags">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.Vector3Ex.IsValid(SharpDX.Vector3,System.Boolean)">
      <summary>
                Returns true if the vector is not zero.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.Vector3Ex.IsValid(SharpDX.Vector2,System.Boolean)">
      <summary>
                Returns true if the vector is not zero.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.Vector3Ex.WorldToGrid(SharpDX.Vector3)">
      <summary>
                Converts a World point to it's Grid equivalent.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.Vector3Ex.WorldToGrid(SharpDX.Vector2)">
      <summary>
                Converts a World point to it's Grid equivalent.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsZyraPlant(Entropy.AIMinionClient)">
      <summary>
                Determines whether minion is Zyra's plant
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsBarrel(Entropy.AIMinionClient)">
      <summary>
                Determines whether minion is Gangplank's barrel
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsDragon(Entropy.AIMinionClient)">
      <summary>
                Determines whether minion is a dragon
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsHerald(Entropy.AIMinionClient)">
      <summary>
                Determines whether minion is herald
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsBaron(Entropy.AIMinionClient)">
      <summary>
                Determines whether minion is baron
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsJungleMinion(Entropy.AIMinionClient)">
      <summary>
                Determines whether minion is a jungle minion
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsLegendaryJungleMinion(Entropy.AIMinionClient)">
      <summary>
                Determines whether minion is legendary jungle minion
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsLargeJungleMinion(Entropy.AIMinionClient)">
      <summary>
                Determines whether minion is large jungle minion
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsSmallJungleMinion(Entropy.AIMinionClient)">
      <summary>
                Determines whether minion is small jungle minion
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsPlant(Entropy.AIMinionClient)">
      <summary>
                Determines whether minion is a plant
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsWard(Entropy.AIMinionClient)">
      <summary>
                Determines whether minion is a ward
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsSiegeMinion(Entropy.AIBaseClient)">
      <summary>
                Determines whether this minion is a siege minion
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.CanKillMinionWithDamage(Entropy.AIMinionClient,System.Single,System.Single)">
      <summary>
                Determines whether this minion can be killed with specified damage in specified time
            </summary>
      <param name="minion">
      </param>
      <param name="damage">
      </param>
      <param name="delay">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.GetPredictedMinionHealth(Entropy.AIMinionClient,System.Single)">
      <summary>
                If time == 0, it will use Time that AA will hit the target
            </summary>
      <param name="minion">
      </param>
      <param name="time">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.IsLaneMinion(Entropy.AIMinionClient)">
      <summary>
                Determines whether this minion is a lane minion
            </summary>
      <param name="minion">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIMinionClientEx.ToString(Entropy.AIMinionClient)">
      <summary>
                Gets this minion's charname and networkID
            </summary>
      <param name="baseClient">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.GameObjectTeamEx.IsAlly(Entropy.GameObjectTeam)">
      <summary>
                Determines whether team contains allies
            </summary>
      <param name="team">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.GameObjectTeamEx.IsEnemy(Entropy.GameObjectTeam)">
      <summary>
                Determines whether team contains enemies
            </summary>
      <param name="team">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.PositionEx.IsUnderFountain(SharpDX.Vector3,Entropy.GameObjectTeam)">
      <summary>
                Determines whether position is within fountain range of desired team
            </summary>
      <param name="position">
      </param>
      <param name="team">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.PositionEx.IsUnderAllyTurret(SharpDX.Vector3)">
      <summary>
                Determines whether position is within ally tower range
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.PositionEx.IsUnderEnemyTurret(SharpDX.Vector3)">
      <summary>
                Determines whether position is within enemy tower range
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.PositionEx.IsUnderTurret(SharpDX.Vector3)">
      <summary>
                Determines whether position is within tower range
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.PositionEx.IsUnderTurret(SharpDX.Vector2)">
      <summary>
                Determines whether position is within tower range
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.PositionEx.IsUnderEnemyTurret(SharpDX.Vector2)">
      <summary>
                Determines whether position is within enemy tower range
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.PositionEx.IsUnderAllyTurret(SharpDX.Vector2)">
      <summary>
                Determines whether position is within ally tower range
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.PositionEx.GetNavGridCell(SharpDX.Vector3)">
      <summary>
                Gets Navgrid's cell from position
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.SpellbookEx.IsLearned(Entropy.Spellbook,Entropy.SpellSlot)">
      <summary>
                Determines whether spell on desired slot is learned
            </summary>
      <param name="sb">
      </param>
      <param name="slot">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.SpellbookEx.GetSpells(Entropy.Spellbook)">
      <summary>
                Gets all spells from spellbook
            </summary>
      <param name="sb">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.SpellDataInstEx.IsLearned(Entropy.SpellDataInst)">
      <summary>
                Determinsed whether spell is learned
            </summary>
      <param name="spell">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.SpellDataInstEx.IsReady(Entropy.SpellDataInst)">
      <summary>
                Determinsed whether spell is ready
            </summary>
      <param name="spell">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.SpellDataInstEx.HasAmmo(Entropy.SpellDataInst)">
      <summary>
                Determinsed whether spell has ammuniton
            </summary>
      <param name="spell">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.AutoAttacksPerSecond(Entropy.AIBaseClient)">
      <summary>
                How many AAs per second the Player's heroes will make
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.GetAutoAttackRange(Entropy.AIBaseClient,Entropy.AttackableUnit)">
      <summary>
                Gets autoattack range
            </summary>
      <param name="source">
      </param>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.GetBuff(Entropy.AIBaseClient,System.String)">
      <summary>
                Returns a determined buff a determined unit has.
            </summary>
      <param name="unit">The unit.</param>
      <param name="buffName">The buff's stringname</param>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.GetBuffCount(Entropy.AIBaseClient,System.String)">
      <summary>
                Returns how many stacks of the 'buffname' buff the target possesses.
            </summary>
      <param name="from">The target.</param>
      <param name="buffName">The buffname.</param>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.GetBuffStacks(Entropy.AIBaseClient,System.String)">
      <summary>
                Returns how many stacks of the 'buffname' buff the target possesses.
            </summary>
      <param name="from">The target.</param>
      <param name="buffName">The buffname.</param>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.HasBuff(Entropy.AIBaseClient,System.String)">
      <summary>
                Determines whether the specified target has a determined buff.
            </summary>
      <param name="from">The target.</param>
      <param name="buffname">The buffname.</param>
      <returns>
        <c>true</c> if the specified target has the 'buffname' buff; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.HasBuffOfType(Entropy.AIBaseClient,Entropy.BuffType)">
      <summary>
                Determines whether the specified unit is affected by a determined bufftype.
            </summary>
      <param name="unit">The unit.</param>
      <param name="buffType">The buff type.</param>
      <returns>
        <c>true</c> if the specified unit is affected by the 'buffType' BuffType; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.HasInvulnerableBuff(Entropy.AIBaseClient)">
      <summary>
                Determines whether this object has invulnerable buff
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.TimeUntilFreeFromCC(Entropy.AIBaseClient)">
      <summary>
                Gets the duration of crowd control buff 
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.IsInAutoAttackRange(Entropy.AIBaseClient,Entropy.AttackableUnit)">
      <summary>
                Determines whether target is in autoattack range
            </summary>
      <param name="source">
      </param>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.IsMinion(Entropy.AIBaseClient)">
      <summary>
                Determines whether target is minion
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.IsImmobile(Entropy.AIBaseClient)">
      <summary>
                Determines whether target is immobile
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.IsImmortal(Entropy.AIBaseClient)">
      <summary>
                Determines whether target is immortal
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.IsMoving(Entropy.AIBaseClient)">
      <summary>
                Determines whether target is moving
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.MPPercent(Entropy.AIBaseClient)">
      <summary>
                Gets target mana percent
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.BonusHP(Entropy.AIBaseClient)">
      <summary>
                Gets target bonus health
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.PredictedHealth(Entropy.AIBaseClient,System.Single)">
      <summary>
                Predicts target health within specified time
            </summary>
      <param name="target">
      </param>
      <param name="time">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.GetRealHealth(Entropy.AIBaseClient,Entropy.DamageType)">
      <summary>
                Gets target's real health for the specific damage type
            </summary>
      <param name="unit">
      </param>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.TotalMagicalShieldHealth(Entropy.AIBaseClient)">
      <summary>
                Gets health including magic shield 
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.TotalPhysicalShieldHealth(Entropy.AIBaseClient)">
      <summary>
                Gets health including physical shield 
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.TotalShieldHealth(Entropy.AIBaseClient)">
      <summary>
                Gets health including total shield 
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.GetActiveBuffs(Entropy.AIBaseClient)">
      <summary>
                Gets the buffs of the unit which are valid and active
            </summary>
      <param name="unit">The unit.</param>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.GetWaypoints2D(Entropy.AIBaseClient)">
      <summary>
                Gets unit's waypoints as a Vector2 list
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.GetWaypoints3D(Entropy.AIBaseClient)">
      <summary>
                Gets unit's waypoints as a Vector3 list
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.ToString(Entropy.AIBaseClient)">
      <summary>
                Gets unit's charname and networkID
            </summary>
      <param name="baseClient">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.TotalAbilityDamage(Entropy.AIBaseClient)">
      <summary>
                Gets total unit's ability damage
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.AbilityDamageScale(Entropy.AIBaseClient)">
      <summary>
                Gets unit's ability damage scaling
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.AbilityDamage(Entropy.AIBaseClient)">
      <summary>
                Gets unit's ability damage
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.BonusAbilityDamage(Entropy.AIBaseClient)">
      <summary>
                Gets unit's bonus ability damage
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.TotalAttackDamage(Entropy.AIBaseClient)">
      <summary>
                Gets unit's total attack damage
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.PhysicalDamageScale(Entropy.AIBaseClient)">
      <summary>
                Gets unit's physical damage scaling
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.PhysicalDamage(Entropy.AIBaseClient)">
      <summary>
                Gets unit's physical damage
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.BonusPhysicalDamage(Entropy.AIBaseClient)">
      <summary>
                Gets unit's bonus physical damage
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.TotalArmor(Entropy.AIBaseClient)">
      <summary>
                Gets client's total armor
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AIBaseClientEx.TotalMagicResist(Entropy.AIBaseClient)">
      <summary>
                Gets client's total magic resist
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AttackableUnitEx.IsDead(Entropy.AttackableUnit)">
      <summary>
                Determines whether the target is dead.
            </summary>
      <param name="target">The target.</param>
      <returns>
        <c>true</c> if the target is dead; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AttackableUnitEx.IsValidAutoAttackRange(Entropy.AttackableUnit,System.Int32)">
      <summary>
                Determines whether the target is a valid target in the auto attack range from the specified check range
                from
                vector.
            </summary>
      <param name="target">The target.</param>
      <param name="extraRange">The extra range.</param>
      <returns>
        <c>true</c> if the target is a valid target in the auto attack range; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AttackableUnitEx.IsValidSpellTarget(Entropy.AttackableUnit,System.Single)">
      <summary>
                Returns true if this unit is able to be targetted by spells
            </summary>
      <param name="unit">The unit.</param>
      <param name="range">The range.</param>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AttackableUnitEx.MissingHPPercent(Entropy.AttackableUnit)">
      <summary>
                Gets this unit's missing HP percent
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AttackableUnitEx.HPPercent(Entropy.AttackableUnit)">
      <summary>
                Gets this unit's HP percent
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AttackableUnitEx.MissingHP(Entropy.AttackableUnit)">
      <summary>
                Gets this unit's missing HP
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AttackableUnitEx.IsValidTarget(Entropy.AttackableUnit,System.Single,System.Boolean)">
      <summary>
                Determines whether this unit is a valid target within specified range
            </summary>
      <param name="target">
      </param>
      <param name="range">
      </param>
      <param name="isAllyAllowed">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AttackableUnitEx.IsValidObjectTarget(Entropy.AttackableUnit)">
      <summary>
                Returns whether this object is a valid object to target
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AttackableUnitEx.TimeForAutoAttackToReachTarget(Entropy.AttackableUnit,Entropy.AIBaseClient)">
      <summary>
                Gets time for autoattack to reach specified target of this unit
            </summary>
      <param name="target">
      </param>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.BuffExtensions.IsMovementImpairing(Entropy.BuffInstance)">
      <summary>
                Determines whether this buff impairs movement
            </summary>
      <param name="buffInstance">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.BuffExtensions.IsMovementImpairing(Entropy.BuffType)">
      <summary>
                Determines whether this bufftype impairs movement
            </summary>
      <param name="buffType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.BuffExtensions.IsHardCC(Entropy.BuffInstance)">
      <summary>
                Determines whether this buff is hard cc
            </summary>
      <param name="buffType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.BuffExtensions.IsHardCC(Entropy.BuffType)">
      <summary>
                Determines whether this bufftype is hard cc
            </summary>
      <param name="buffType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.BuffExtensions.IsActive(Entropy.BuffInstance)">
      <summary>
                Determines whether this buff is active
            </summary>
      <param name="buff">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.BuffExtensions.PreventsCasting(Entropy.BuffInstance)">
      <summary>
                Determines whether this buff prevents casting
            </summary>
      <param name="buff">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.BuffExtensions.PreventsCasting(Entropy.BuffType)">
      <summary>
                Determines whether this bufftype prevents casting
            </summary>
      <param name="buffType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.BuffExtensions.PreventsAutoAttacking(Entropy.BuffInstance)">
      <summary>
                Determines whether this buff prevents autoattacking
            </summary>
      <param name="buff">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.BuffExtensions.PreventsAutoAttacking(Entropy.BuffType)">
      <summary>
                Determines whether this bufftype prevents autoattacking
            </summary>
      <param name="buffType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.BuffExtensions.TimeLeft(Entropy.BuffInstance)">
      <summary>
                Gets this buff's time that is left
            </summary>
      <param name="buff">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.GameObjectEx.IsAlly(Entropy.GameObject)">
      <summary>
                Determines whether this unit is an ally
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.GameObjectEx.IsEnemy(Entropy.GameObject)">
      <summary>
                Determines whether this unit is an enemy
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.GameObjectEx.IsFacing(Entropy.AIBaseClient,Entropy.AIBaseClient,System.Single,System.Single)">
      <summary>
                Determines whether this unit is facing target in specified angle and range
            </summary>
      <param name="source">
      </param>
      <param name="target">
      </param>
      <param name="angle">
      </param>
      <param name="range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.GameObjectEx.IsFacing(Entropy.AIBaseClient,SharpDX.Vector3,System.Single,System.Single)">
      <summary>
                Determines whether this unit is facing target positon in specified angle and range
            </summary>
      <param name="source">
      </param>
      <param name="target">
      </param>
      <param name="angle">
      </param>
      <param name="range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.GameObjectEx.IsMe(Entropy.GameObject)">
      <summary>
                Determines whether this unit is LocalPlayer
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.GameObjectEx.IsStructure(Entropy.AttackableUnit)">
      <summary>
                Determines whether this unit is a structure
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.GetPlayerTeamDragonKills(Entropy.AIHeroClient)">
      <summary>
                Gets specified hero's team's total dragon kills
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.GetHeroCriticalDamageMultiplier(Entropy.AIHeroClient,Entropy.AIBaseClient)">
      <summary>
                Gets hero's critical damage multiplier to target
            </summary>
      <param name="hero">
      </param>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.GetSpawnPointPosition(Entropy.GameObjectTeam)">
      <summary>
                Gets team's spawn position
            </summary>
      <param name="team">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.GetSpawnPointPosition(Entropy.AIHeroClient)">
      <summary>
                Gets hero's spawn position
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.CooldownReduction(Entropy.AIHeroClient)">
      <summary>
                Gets hero's cooldown reduction
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.ChampionsThatCanBlockAutos">
      <summary>
                Array containing champions that can block autoattacks
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.HasAaBlockingBuff(Entropy.AIHeroClient)">
      <summary>
                Determines whether this hero has autoattack blocking buff
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.IsBeingGrabbed(Entropy.AIHeroClient)">
      <summary>
                Determines whether hero is being hooked
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.CanChangeStance(Entropy.AIHeroClient)">
      <summary>
                Determines whether this hero can change stance
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.IsImmobile(Entropy.AIBaseClient,System.Double)">
      <summary>
                Gets a value indicating whether a determined champion can move or not.
            </summary>
      <param name="unit">The hero.</param>
      <param name="minTime">The minimum time remaining for the CC to trigger this function.</param>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.HasImmobileBuff(Entropy.AIHeroClient)">
      <summary>
                Determines whether this hero has immobile buff
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.HasAutoAttackEmpoweringBuff(Entropy.AIHeroClient)">
      <summary>
                Determines whether hero has autoattack empowering buff
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.UsingHealthPot(Entropy.AIBaseClient)">
      <summary>
                Determines whether target is using health potion (Czy jest pizdą czy nie)
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.UsingManaPot(Entropy.AIBaseClient)">
      <summary>
                Determines whether target is using mana potion
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.GetItem(Entropy.AIBaseClient,Entropy.SDK.Enumerations.ItemID)">
      <summary>
                Gets item of this hero with specified ItemID
            </summary>
      <param name="target">
      </param>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.CanAttack(Entropy.AIHeroClient)">
      <summary>
                Determines whether champion can attack
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.MaxEXP(Entropy.AIHeroClient)">
      <summary>
                Gets this hero's max experience
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.TotalMaxEXP(Entropy.AIHeroClient,System.Int32)">
      <summary>
                Gets this hero's total max experience
            </summary>
      <param name="hero">
      </param>
      <param name="level">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.CanCrit(Entropy.AIHeroClient)">
      <summary>
                Determines whether champion can crit
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.IsZombie(Entropy.AIHeroClient)">
      <summary>
                Returns true if a determined hero is a zombie.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.GetChampion(Entropy.AIHeroClient)">
      <summary>
                Gets champion of this unit
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.HasItem(Entropy.AIHeroClient,System.UInt32)">
      <summary>
                Determines whether the specified hero target has a determined item.
            </summary>
      <param name="from">The target.</param>
      <param name="itemId">The item's ID.</param>
      <returns>
        <c>true</c> if the specified hero target has the 'ItemID' item; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.IsInShopRange(Entropy.AIHeroClient)">
      <summary>
                Determines whether hero is in shop range
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.IsRecalling(Entropy.AIHeroClient)">
      <summary>
                Determines whether hero is recalling
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.IsJungler(Entropy.AIHeroClient)">
      <summary>
                Determines whether this hero is a jungler
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.Level(Entropy.AIHeroClient)">
      <summary>
                Gets this champion's level
            </summary>
      <param name="from">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.GetBasicAttackMissileSpeed(Entropy.AIBaseClient)">
      <summary>
                Gets this champion's basic attack missle speed
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.GetSpellSlotFromName(Entropy.AIHeroClient,System.String)">
      <summary>
                Gets this champion's spellslot by name
            </summary>
      <param name="hero">
      </param>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.HasUltimate(Entropy.AIHeroClient)">
      <summary>
                Determines whether this hero has ultimate leveled
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.UltimateReady(Entropy.AIHeroClient)">
      <summary>
                Determines whether this hero's ultimate is ready
            </summary>
      <param name="hero">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.IsMovementImpaired(Entropy.AIBaseClient)">
      <summary>
                Determines whether this hero has imparied movement
            </summary>
      <param name="unit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.GetAdaptiveDamageType(Entropy.AIHeroClient)">
      <summary>
                Gets adaptive damage type of this hero
            </summary>
      <param name="source">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.TimeToGetTo(Entropy.AIHeroClient,SharpDX.Vector3)">
      <summary>
                Gets time to get to the specified position by this hero
            </summary>
      <param name="hero">
      </param>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.Objects.AiHeroClientEx.ToString(Entropy.AIHeroClient)">
      <summary>
                Gets hero's charname and networkID
            </summary>
      <param name="baseClient">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Extensions.StringExt.Truncate(System.String,System.Int32)">
      <summary>
                Truncates the string by desired length
            </summary>
      <param name="value">
      </param>
      <param name="maxLength">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.WorldAndScreenConversions.WorldToTacticalMap(SharpDX.Vector3)">
      <summary>
                Converts Vector3 position to minimap position
            </summary>
      <param name="position">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:Entropy.SDK.Geometry.AOE.MEC.MinMaxBox">
      <summary>
                Gets or sets the min max box.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Geometry.AOE.MEC.MinMaxCorners">
      <summary>
                Gets or sets the min max corners.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Geometry.AOE.MEC.NonCulledPoints">
      <summary>
                Gets or sets the non culled points.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Geometry.AOE.MEC.GetAcurateMEC(System.Collections.Generic.IEnumerable{Entropy.AIBaseClient})">
      <summary>
                Gets accurate MEC from enumerated enemies
            </summary>
      <param name="enemies">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.AOE.MEC.GetMEC(System.Collections.Generic.IEnumerable{SharpDX.Vector3})">
      <summary>
                Gets MEC from enumerated Vector3 points
            </summary>
      <param name="points">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.AOE.MEC.GetMEC(System.Collections.Generic.IEnumerable{SharpDX.Vector2})">
      <summary>
                Gets MEC from enumerated Vector2 points
            </summary>
      <param name="points">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.Geometry.Arc">
      <summary>
                Class Arc
            </summary>
      <seealso cref="T:Entropy.SDK.Geometry.LinearPolygon" />
    </member>
    <member name="M:Entropy.SDK.Geometry.Arc.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single,System.UInt32,System.Single)">
      <inheritdoc />
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Geometry.Arc" /> class.
            </summary>
      <param name="worldStart">The start point in world-space.</param>
      <param name="worldEnd">The end point in world-space.</param>
      <param name="radius">The radius.</param>
      <param name="angle">The angle.</param>
      <param name="quality">The quality.</param>
      <param name="direction">Only right or left supported</param>
    </member>
    <member name="M:Entropy.SDK.Geometry.Arc.Render(SharpDX.Color,System.Single)">
      <summary>
                Renders the linear polygon with the specified color.
            </summary>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="P:Entropy.SDK.Geometry.Arc.Angle">
      <summary>
                Gets or sets the angle.
            </summary>
      <value>
                The angle.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Arc.EndPoint">
      <summary>
                Gets or sets the end point.
            </summary>
      <value>
                The end point.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Arc.Quality">
      <summary>
                Gets or sets the quality.
            </summary>
      <value>
                The quality.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Arc.StartPoint">
      <summary>
                Gets or sets the start point.
            </summary>
      <value>
                The start point.
            </value>
    </member>
    <member name="M:Entropy.SDK.Geometry.Circle.#ctor(SharpDX.Vector3,System.Single,System.UInt32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Geometry.Circle" /> class.
            </summary>
      <param name="worldCenter">The world center.</param>
      <param name="radius">The radius.</param>
      <param name="quality">
      </param>
    </member>
    <member name="P:Entropy.SDK.Geometry.Circle.Center">
      <summary>
                Gets or sets the center point.
            </summary>
      <value>
                The center point.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Circle.Radius">
      <summary>
                Gets or sets the radius.
            </summary>
      <value>
                The radius.
            </value>
    </member>
    <member name="M:Entropy.SDK.Geometry.Circle.FindIntersection(Entropy.SDK.Geometry.Circle)">
      <summary>
                Finds the intersection of two circles.
            </summary>
      <param name="circle">The other circle.</param>
      <returns>
        <see>
          <cref>Vector2[]</cref>
        </see>
                of the intersection points.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Circle.FindIntersection(Entropy.SDK.Geometry.Line)">
      <summary>
                Finds the intersection of a circle and a line.
            </summary>
      <param name="line">The line.</param>
      <returns>
        <see>
          <cref>Vector2[]</cref>
        </see>
                of the intersection points.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Circle.IsInsidePolygon(SharpDX.Vector2)">
      <summary>
                Determines whether [is inside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is inside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Circle.IsInsidePolygon(SharpDX.Vector3)">
      <summary>
                Determines whether [is inside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is inside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Circle.IsOutsidePolygon(SharpDX.Vector2)">
      <summary>
                Determines whether [is outside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is outside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Circle.IsOutsidePolygon(SharpDX.Vector3)">
      <summary>
                Determines whether [is outside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is outside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Circle.RenderFancy(SharpDX.Color,System.Single)">
      <summary>
                Renders the circle in the specified color.
            </summary>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Entropy.SDK.Geometry.EquilateralTriangle.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Boolean)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Geometry.EquilateralTriangle" /> class.
            </summary>
      <param name="worldRoot1">The first world root.</param>
      <param name="worldRoot2">The second world root.</param>
      <param name="up">if set to <c>true</c> [up].</param>
    </member>
    <member name="P:Entropy.SDK.Geometry.EquilateralTriangle.Direction">
      <summary>
                Gets the direction.
            </summary>
      <value>
                The direction.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.EquilateralTriangle.Up">
      <summary>
                Gets or sets a value indicating whether this <see cref="T:Entropy.SDK.Geometry.EquilateralTriangle" /> is facing up.
            </summary>
      <value>
        <c>true</c> if facing up; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Entropy.SDK.Geometry.IsoscelesTriangle">
      <summary>
                Class IsoscelesTriangle
            </summary>
      <seealso cref="T:Entropy.SDK.Geometry.Triangle" />
    </member>
    <member name="M:Entropy.SDK.Geometry.IsoscelesTriangle.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Boolean)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Geometry.IsoscelesTriangle" /> class.
            </summary>
      <param name="worldRoot1">The first world root.</param>
      <param name="worldRoot2">The second world root.</param>
      <param name="height">The height.</param>
      <param name="up">if set to <c>true</c> [facing up].</param>
    </member>
    <member name="P:Entropy.SDK.Geometry.IsoscelesTriangle.Direction">
      <summary>
                Gets the direction.
            </summary>
      <value>
                The direction.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.IsoscelesTriangle.Height">
      <summary>
                Gets or sets the height.
            </summary>
      <value>
                The height.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.IsoscelesTriangle.Up">
      <summary>
                Gets or sets a value indicating whether this <see cref="T:Entropy.SDK.Geometry.IsoscelesTriangle" /> is facing up.
            </summary>
      <value>
        <c>true</c> if facing up; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Entropy.SDK.Geometry.Line">
      <summary>
                Class Line
            </summary>
      <seealso cref="T:Entropy.SDK.Geometry.LinearPolygon" />
    </member>
    <member name="M:Entropy.SDK.Geometry.Line.#ctor(SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Geometry.Line" /> class.
            </summary>
      <param name="rootPoint1">The root point1.</param>
      <param name="rootPoint2">The root point2.</param>
    </member>
    <member name="P:Entropy.SDK.Geometry.Line.RootPoint1">
      <summary>
                Gets or sets the first root point.
            </summary>
      <value>
                The first root point.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Line.RootPoint2">
      <summary>
                Gets or sets the second root point.
            </summary>
      <value>
                The second root point.
            </value>
    </member>
    <member name="M:Entropy.SDK.Geometry.Line.FindIntersection(Entropy.SDK.Geometry.Line)">
      <summary>
                Finds the intersection of two lines.
            </summary>
      <param name="line1">The other line.</param>
      <returns>
                The <see cref="T:SharpDX.Vector2" /> intersection point, or <see cref="F:SharpDX.Vector2.Zero" /> if the lines are
                parallel.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Line.FindIntersection(Entropy.SDK.Geometry.Circle)">
      <summary>
                Finds the intersection of the line and a circle.
            </summary>
      <param name="circle">The circle.</param>
      <returns>
        <see cref="!:Vector2[]" /> of all the intersections found.</returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Line.Render(SharpDX.Color,System.Single)">
      <summary>
                Renders the line with the specified color.
            </summary>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="F:Entropy.SDK.Geometry.LinearPolygon.WorldPoints">
      <summary>
                Gets or sets the world points.
            </summary>
      <value>
                The world points.
            </value>
    </member>
    <member name="M:Entropy.SDK.Geometry.LinearPolygon.#ctor(SharpDX.Vector3[])">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Geometry.LinearPolygon" /> class.
            </summary>
      <param name="worldPoints">The world points.</param>
    </member>
    <member name="M:Entropy.SDK.Geometry.LinearPolygon.Update">
      <summary>
                Updates and calculates this polygon's <see cref="F:Entropy.SDK.Geometry.LinearPolygon.WorldPoints" /> using its simpler to use custom
                implementation.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Geometry.LinearPolygon.IsInsidePolygon(SharpDX.Vector2)">
      <summary>
                Determines whether [is inside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is inside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.LinearPolygon.IsInsidePolygon(SharpDX.Vector3)">
      <summary>
                Determines whether [is inside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is inside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.LinearPolygon.IsOutsidePolygon(SharpDX.Vector2)">
      <summary>
                Determines whether [is outside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is outside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.LinearPolygon.IsOutsidePolygon(SharpDX.Vector3)">
      <summary>
                Determines whether [is outside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is outside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.LinearPolygon.Render(SharpDX.Color,System.Single)">
      <summary>
                Renders the linear polygon with the specified color.
            </summary>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Entropy.SDK.Geometry.LinearPolygon.ToClipperPath">
      <summary>
                Converts the polygon to a clipper path, which is a list of <see cref="T:Entropy.SDK.ThirdParty.IntPoint" /></summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> of the world-space points</returns>
    </member>
    <member name="T:Entropy.SDK.Geometry.Rectangle">
      <summary>
                Class Rectangle
            </summary>
      <seealso cref="T:Entropy.SDK.Geometry.LinearPolygon" />
    </member>
    <member name="M:Entropy.SDK.Geometry.Rectangle.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Geometry.Rectangle" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="width">The width.</param>
    </member>
    <member name="P:Entropy.SDK.Geometry.Rectangle.Direction">
      <summary>
                Gets the direction.
            </summary>
      <value>
                The direction.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Rectangle.EndPoint">
      <summary>
                Gets or sets the end point.
            </summary>
      <value>
                The end point.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Rectangle.StartPoint">
      <summary>
                Gets or sets the start point.
            </summary>
      <value>
                The start point.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Rectangle.Width">
      <summary>
                Gets or sets the width.
            </summary>
      <value>
                The width.
            </value>
    </member>
    <member name="M:Entropy.SDK.Geometry.Ring.#ctor(SharpDX.Vector3,System.Single,System.Single,System.UInt32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Geometry.Circle" /> class.
            </summary>
      <param name="worldCenter">The world center.</param>
      <param name="outRadius">
      </param>
      <param name="quality">
      </param>
      <param name="innerRadius" />
    </member>
    <member name="P:Entropy.SDK.Geometry.Ring.Center">
      <summary>
                Gets or sets the center point.
            </summary>
      <value>
                The center point.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Ring.InnerRadius">
      <summary>
                Gets or sets the radius.
            </summary>
      <value>
                The radius.
            </value>
    </member>
    <member name="M:Entropy.SDK.Geometry.Ring.IsInsidePolygon(SharpDX.Vector2)">
      <summary>
                Determines whether [is inside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is inside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Ring.IsInsidePolygon(SharpDX.Vector3)">
      <summary>
                Determines whether [is inside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is inside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Ring.IsOutsidePolygon(SharpDX.Vector2)">
      <summary>
                Determines whether [is outside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is outside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Ring.IsOutsidePolygon(SharpDX.Vector3)">
      <summary>
                Determines whether [is outside polygon] [the specified world point].
            </summary>
      <param name="worldPoint">The world point.</param>
      <returns>
        <c>true</c> if [is outside polygon] [the specified world point]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Entropy.SDK.Geometry.Ring.RenderFancy(SharpDX.Color,System.Single)">
      <summary>
                Renders the circle in the specified color.
            </summary>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="T:Entropy.SDK.Geometry.Sector">
      <summary>
                Class Sector
            </summary>
      <seealso cref="T:Entropy.SDK.Geometry.LinearPolygon" />
    </member>
    <member name="M:Entropy.SDK.Geometry.Sector.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Single,System.UInt32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Geometry.Sector" /> class.
            </summary>
      <param name="worldCenter">The world center.</param>
      <param name="direction">The direction.</param>
      <param name="angle">The angle in degrees not radians.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="P:Entropy.SDK.Geometry.Sector.Angle">
      <summary>
                Gets or sets the angle.
            </summary>
      <value>
                The angle.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Sector.Center">
      <summary>
                Gets or sets the center point.
            </summary>
      <value>
                The center point.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Sector.Direction">
      <summary>
                Gets or sets the direction.
            </summary>
      <value>
                The direction.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Sector.Quality">
      <summary>
                Gets or sets the quality.
            </summary>
      <value>
                The quality.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Sector.Radius">
      <summary>
                Gets or sets the radius.
            </summary>
      <value>
                The radius.
            </value>
    </member>
    <member name="T:Entropy.SDK.Geometry.Triangle">
      <summary>
                Class Triangle
            </summary>
      <seealso cref="T:Entropy.SDK.Geometry.LinearPolygon" />
    </member>
    <member name="M:Entropy.SDK.Geometry.Triangle.#ctor(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Geometry.Triangle" /> class.
            </summary>
      <param name="worldRoot1">The first world-space root point.</param>
      <param name="worldRoot2">The second world-space root point.</param>
      <param name="worldRoot3">The third world-space root point.</param>
    </member>
    <member name="P:Entropy.SDK.Geometry.Triangle.RootPoint1">
      <summary>
                Gets or sets the root point.
            </summary>
      <value>
                The first root point.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Triangle.RootPoint2">
      <summary>
                Gets or sets the second root point.
            </summary>
      <value>
                The second root point.
            </value>
    </member>
    <member name="P:Entropy.SDK.Geometry.Triangle.RootPoint3">
      <summary>
                Gets or sets the third root point.
            </summary>
      <value>
                The third root point.
            </value>
    </member>
    <member name="M:Entropy.SDK.Geometry.VectorMovementCollisionGeo.VectorMovementCollision(SharpDX.Vector2,SharpDX.Vector2,System.Single,SharpDX.Vector2,System.Single,System.Single)">
      <summary>
                Gets the vectors movement collision.
            </summary>
      <param name="startPoint1">The start point1.</param>
      <param name="endPoint1">The end point1.</param>
      <param name="v1">The v1.</param>
      <param name="startPoint2">The start point2.</param>
      <param name="v2">The v2.</param>
      <param name="delay">The delay.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.Geometry.VectorMovementCollisionGeo.VectorMovementCollisionResult">
      <summary>
                Struct VectorMovementCollisionResult
            </summary>
    </member>
    <member name="F:Entropy.SDK.Geometry.VectorMovementCollisionGeo.VectorMovementCollisionResult.Position">
      <summary>
                Gets or sets the position.
            </summary>
      <value>The position.</value>
    </member>
    <member name="F:Entropy.SDK.Geometry.VectorMovementCollisionGeo.VectorMovementCollisionResult.Time">
      <summary>
                Gets or sets the time.
            </summary>
      <value>The time.</value>
    </member>
    <member name="E:Entropy.SDK.Orbwalking.Orbwalker.OnPostAttack">
      <summary>
                Invokes after the attack
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="E:Entropy.SDK.Orbwalking.Orbwalker.OnPreAttack">
      <summary>
                Invokes before the attack
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="E:Entropy.SDK.Orbwalking.Orbwalker.OnPreMove">
      <summary>
                Invokes before starts moving
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="E:Entropy.SDK.Orbwalking.Orbwalker.OnUnkillableMinion">
      <summary>
                Invokes each tick
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="E:Entropy.SDK.Orbwalking.Orbwalker.OnPreTick">
      <summary>
                Invokes before the new tick
            </summary>
    </member>
    <member name="T:Entropy.SDK.Orbwalking.EventArgs.OrbwalkingEventArgs">
      <summary>
                A base class used by the Orbwalker for events.
            </summary>
      <seealso cref="T:System.EventArgs" />
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OrbwalkingEventArgs.Target">
      <summary>
                Gets or sets the target.
            </summary>
      <value>
                The target.
            </value>
    </member>
    <member name="T:Entropy.SDK.Orbwalking.EventArgs.OnPostAttackEventArgs">
      <summary>
                The event arguements for the <see cref="!:IOrbwalker.PostAttack" /> event.
            </summary>
      <seealso cref="T:Entropy.SDK.Orbwalking.EventArgs.OrbwalkingEventArgs" />
    </member>
    <member name="T:Entropy.SDK.Orbwalking.EventArgs.OnPreAttackEventArgs">
      <summary>
                The event arguements for the <see cref="!:IOrbwalker.PreAttack" /> event.
            </summary>
      <seealso cref="T:Entropy.SDK.Orbwalking.EventArgs.OrbwalkingEventArgs" />
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OnPreAttackEventArgs.Cancel">
      <summary>
                Gets or sets a value indicating whether this <see cref="T:Entropy.SDK.Orbwalking.EventArgs.OnPreAttackEventArgs" /> is cancel.
            </summary>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Entropy.SDK.Orbwalking.EventArgs.OnPreMoveEventArgs">
      <summary>
                The event arguements for the <see cref="!:IOrbwalker.PreMove" /> event.
            </summary>
      <seealso cref="T:Entropy.SDK.Orbwalking.EventArgs.OrbwalkingEventArgs" />
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OnPreMoveEventArgs.Cancel">
      <summary>
                Gets or sets a value indicating whether this <see cref="T:Entropy.SDK.Orbwalking.EventArgs.OnPreMoveEventArgs" /> is cancel.
            </summary>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OnPreMoveEventArgs.MovePosition">
      <summary>
                Gets or sets the move position.
            </summary>
      <value>The move position.</value>
    </member>
    <member name="T:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode">
      <summary>
                Class OrbwalkerMode
            </summary>
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.GetTargetImplementation">
      <summary>
                The target selection logic for this mode
            </summary>
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.ModeBehaviour">
      <summary>
                This Orbwalker Mode's logic
            </summary>
    </member>
    <member name="M:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.#ctor(System.String,Entropy.SDK.UI.Components.MenuKeyBind,Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.TargetDelegate,Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.OrbwalkModeDelegate)">
      <summary>
                Creates a new instance of an OrbwalkerMode using a Global Key
            </summary>
    </member>
    <member name="M:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.#ctor(System.String,Entropy.WindowMessageWParam,Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.TargetDelegate,Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.OrbwalkModeDelegate)">
      <summary>
                Creates a new instance of an OrbwalkerMode using a new Keybind
            </summary>
    </member>
    <member name="T:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.OrbwalkModeDelegate">
      <summary>
                The delegate for this Mode's logic
            </summary>
    </member>
    <member name="T:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.TargetDelegate">
      <summary>
                The delegate for this Mode's target selection logic
            </summary>
    </member>
    <member name="P:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.Active">
      <summary>
                Whether this mode is currently active
            </summary>
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.AttackingEnabled">
      <summary>
                Whether attacking is currently allowed
            </summary>
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.BaseOrbwalkingEnabled">
      <summary>
                Whether this mode should execute the base Orbwalking Logic
            </summary>
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.MenuItem">
      <summary>
                The MenuKeyBind item associated with this mode
            </summary>
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.MovingEnabled">
      <summary>
                Whether moving is currently enabled
            </summary>
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.Name">
      <summary>
                The name of this mode
            </summary>
    </member>
    <member name="F:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.UsingGlobalKey">
      <summary>
                Whether this mode is using a Global Key instead of its own KeyBind
            </summary>
    </member>
    <member name="M:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.Execute">
      <summary>
                Executes the logic for this Orbwalking Mode
            </summary>
    </member>
    <member name="M:Entropy.SDK.Orbwalking.EventArgs.OrbwalkerMode.GetTarget">
      <summary>
                Gets the target
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.Prediction.HealthPrediction">
      <summary>
                Health Movement class for prediction of health of units.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.HealthPrediction.PredictHealth(Entropy.AttackableUnit,System.Single)">
      <summary>
                Returns the health prediction
            </summary>
      <param name="unit">
        <see cref="T:Entropy.AIBaseClient" /> unit</param>
      <param name="time">The time in milliseconds</param>
      <returns>
                The <see cref="T:System.Single" /></returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.HealthPrediction.PredictHealthEx(Entropy.AttackableUnit,System.Single,System.Single)">
      <summary>
                Returns the extended health prediction
            </summary>
      <param name="unit">
        <see cref="T:Entropy.AIBaseClient" /> unit</param>
      <param name="time">The time in seconds</param>
      <returns>
                The <see cref="T:System.Single" /></returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.HealthPrediction.HasMinionAggro(Entropy.AttackableUnit)">
      <summary>
                Determines whether the specified unit has any minion aggro.
            </summary>
      <param name="minion">The minion.</param>
      <returns>
                The <see cref="T:System.Boolean" /></returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.HealthPrediction.HasTurretAggro(Entropy.AttackableUnit)">
      <summary>
                Determines whether the specified unit has any aggro.
            </summary>
      <param name="minion">The minion.</param>
      <returns>
                The <see cref="T:System.Boolean" /></returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.HealthPrediction.GetAttackingTurret(Entropy.AttackableUnit)">
      <summary>
                Determines the turret that attacks a unit.
            </summary>
      <param name="minion">The minion.</param>
      <returns>
                The <see cref="T:Entropy.AITurretClient" /></returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.HealthPrediction.GetLastAttackStartTime(Entropy.AttackableUnit)">
      <summary>
                Determines last time the unit has attacked.
            </summary>
      <param name="minion">The minion.</param>
      <returns>
                The <see cref="T:System.Single" /></returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.HealthPrediction.CountMinionAggro(Entropy.AttackableUnit)">
      <summary>
                Determines how many minions are aggrod onto a specified unit.
            </summary>
      <param name="minion">The minion.</param>
      <returns>
                The <see cref="T:System.Int32" /></returns>
    </member>
    <member name="T:Entropy.SDK.Prediction.ICPred.Geometry">
      <summary>
                Provides methods regarding geometry math.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Direction(Entropy.AIBaseClient,Entropy.SDK.Prediction.ICPred.Direction)">
      <summary>
                Left direction not supported
            </summary>
      <param name="target">
      </param>
      <param name="dir">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.IsInRange(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Returns if the Vector2 is in range of the spell.
            </summary>
      <param name="from">
      </param>
      <param name="point">The point.</param>
      <param name="range">The range.</param>
      <returns>
        <c>true</c> if the specified location is in range of the spell; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.IsInRange(SharpDX.Vector2,SharpDX.Vector3,System.Single)">
      <summary>
                Returns if the Vector2 is in range of the spell.
            </summary>
      <param name="from">
      </param>
      <param name="point">The point.</param>
      <param name="range">The range.</param>
      <returns>
        <c>true</c> if the specified location is in range of the spell; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.IsInRange(SharpDX.Vector3,SharpDX.Vector2,System.Single)">
      <summary>
                Returns if the Vector2 is in range of the spell.
            </summary>
      <param name="from">
      </param>
      <param name="point">The point.</param>
      <param name="range">The range.</param>
      <returns>
        <c>true</c> if the specified location is in range of the spell; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.IsInRange(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
      <summary>
                Returns if the Vector2 is in range of the spell.
            </summary>
      <param name="from">
      </param>
      <param name="point">The point.</param>
      <param name="range">The range.</param>
      <returns>
        <c>true</c> if the specified location is in range of the spell; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.IsInLineSegment(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Determins whether point is in line segment
            </summary>
      <param name="point">
      </param>
      <param name="segmentStart">
      </param>
      <param name="segmentEnd">
      </param>
      <param name="tolerance">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.GetLineCircleIntersectionPoints(SharpDX.Vector2,System.Single,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Gets array of line circle intersection points
            </summary>
      <param name="center">
      </param>
      <param name="radius">
      </param>
      <param name="segmentStart">
      </param>
      <param name="segmentEnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.Prediction.ICPred.Geometry.IntersectionResult">
      <summary>
                Represents an intersection result.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.IntersectionResult.Intersects">
      <summary>
                If they intersect.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.IntersectionResult.Point">
      <summary>
                The point
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.IntersectionResult.#ctor(System.Boolean,SharpDX.Vector2)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.IntersectionResult" /> struct.
            </summary>
      <param name="Intersects">if set to <c>true</c>, they insersect.</param>
      <param name="Point">The point.</param>
    </member>
    <member name="T:Entropy.SDK.Prediction.ICPred.Geometry.ProjectionInfo">
      <summary>
                Represents the projection information.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.ProjectionInfo.IsOnSegment">
      <summary>
                The is on segment
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.ProjectionInfo.LinePoint">
      <summary>
                The line point
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.ProjectionInfo.SegmentPoint">
      <summary>
                The segment point
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.ProjectionInfo.#ctor(System.Boolean,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.ProjectionInfo" /> struct.
            </summary>
      <param name="isOnSegment">if set to <c>true</c> [is on segment].</param>
      <param name="segmentPoint">The segment point.</param>
      <param name="linePoint">The line point.</param>
    </member>
    <member name="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon">
      <summary>
                Represents a polygon.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Points">
      <summary>
                The points
            </summary>
    </member>
    <member name="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Arc">
      <summary>
                Represnets an arc polygon.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Arc.UpdatePolygon(System.Int32)">
      <summary>
                Updates the polygon.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Arc.Angle">
      <summary>
                The angle
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Arc.EndPos">
      <summary>
                The end position
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Arc.Radius">
      <summary>
                The radius
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Arc.StartPos">
      <summary>
                The start position
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Arc.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Arc" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="direction">The direction.</param>
      <param name="angle">The angle.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Arc.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Arc" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="direction">The direction.</param>
      <param name="angle">The angle.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Circle">
      <summary>
                Represents a circle polygon.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Circle.UpdatePolygon(System.Int32,System.Single)">
      <summary>
                Updates the polygon.
            </summary>
      <param name="offset">The offset.</param>
      <param name="overrideWidth">Width of the override.</param>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Circle.Center">
      <summary>
                The center
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Circle.Radius">
      <summary>
                The radius
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Circle.#ctor(SharpDX.Vector3,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Circle" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Circle.#ctor(SharpDX.Vector2,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Circle" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Line">
      <summary>
                Represents a line polygon.
            </summary>
    </member>
    <member name="P:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Line.Length">
      <summary>
                Gets or sets the length.
            </summary>
      <value>
                The length.
            </value>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Line.UpdatePolygon">
      <summary>
                Updates the polygon.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Line.LineEnd">
      <summary>
                The line end
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Line.LineStart">
      <summary>
                The line start
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Line.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Line" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="length">The length.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Line.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Line" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="length">The length.</param>
    </member>
    <member name="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Rectangle">
      <summary>
                Represents a rectangle polygon.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Rectangle.UpdatePolygon(System.Int32,System.Single)">
      <summary>
                Updates the polygon.
            </summary>
      <param name="offset">The offset.</param>
      <param name="overrideWidth">Width of the override.</param>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Rectangle.End">
      <summary>
                The end
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Rectangle.Start">
      <summary>
                The start
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Rectangle.Width">
      <summary>
                The width
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Rectangle.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Rectangle" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="width">The width.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Rectangle.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Rectangle" /> class.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="width">The width.</param>
    </member>
    <member name="P:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Rectangle.Direction">
      <summary>
                Gets the direction.
            </summary>
      <value>
                The direction.
            </value>
    </member>
    <member name="P:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Rectangle.Perpendicular">
      <summary>
                Gets the perpendicular.
            </summary>
      <value>
                The perpendicular.
            </value>
    </member>
    <member name="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Ring">
      <summary>
                Represents a ring polygon.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Ring.UpdatePolygon(System.Int32)">
      <summary>
                Updates the polygon.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Ring.Center">
      <summary>
                The center
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Ring.InnerRadius">
      <summary>
                The inner radius
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Ring.OuterRadius">
      <summary>
                The outer radius
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Ring.#ctor(SharpDX.Vector3,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Ring" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="innerRadius">The inner radius.</param>
      <param name="outerRadius">The outer radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Ring.#ctor(SharpDX.Vector2,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Ring" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="innerRadius">The inner radius.</param>
      <param name="outerRadius">The outer radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Sector">
      <summary>
                Represnets a sector polygon.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Sector.Angle">
      <summary>
                The angle
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Sector.Center">
      <summary>
                The center
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Sector.Direction">
      <summary>
                The direction
            </summary>
    </member>
    <member name="F:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Sector.Radius">
      <summary>
                The radius
            </summary>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Sector.#ctor(SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Sector" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="direction">The direction.</param>
      <param name="angle">The angle.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Sector.#ctor(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Sector" /> class.
            </summary>
      <param name="center">The center.</param>
      <param name="direction">The direction.</param>
      <param name="angle">The angle.</param>
      <param name="radius">The radius.</param>
      <param name="quality">The quality.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Sector.RotateLineFromPoint(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Boolean)">
      <summary>
                Rotates Line by angle/radian
            </summary>
      <param name="point1">
      </param>
      <param name="point2">
      </param>
      <param name="value">
      </param>
      <param name="radian">True for radian values, false for degree</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Sector.UpdatePolygon(System.Int32)">
      <summary>
                Updates the polygon.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Add(SharpDX.Vector2)">
      <summary>
                Adds the specified point.
            </summary>
      <param name="point">The point.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Add(SharpDX.Vector3)">
      <summary>
                Adds the specified point.
            </summary>
      <param name="point">The point.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Add(Entropy.SDK.Prediction.ICPred.Geometry.Polygon)">
      <summary>
                Adds the specified polygon.
            </summary>
      <param name="polygon">The polygon.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.Draw(SharpDX.Color,System.Int32)">
      <summary>
                Draws the polygon.
            </summary>
      <param name="color">The color.</param>
      <param name="width">The width.</param>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.IsInside(SharpDX.Vector2)">
      <summary>
                Determines whether the specified point is inside.
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.IsInside(SharpDX.Vector3)">
      <summary>
                Determines whether the specified point is inside.
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.IsInside(Entropy.GameObject)">
      <summary>
                Determines whether the specified point is inside.
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.IsOutside(SharpDX.Vector2)">
      <summary>
                Determines whether the specified point is outside.
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polygon.ToClipperPath">
      <summary>
                Converts this instance to a clipper path.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.AngleBetween(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Returns the angle with the vector p2 in degrees;
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">The second point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.IsWall(SharpDX.Vector2)">
      <summary>
                Return whether this position is in wall
            </summary>
      <param name="vector2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.CenterOfPolygone(Entropy.SDK.Prediction.ICPred.Geometry.Polygon)">
      <summary>
                Returns a Vector2 at center of the polygon.
            </summary>
      <param name="p">The polygon.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.CircleCircleIntersection(SharpDX.Vector2,SharpDX.Vector2,System.Single,System.Single)">
      <summary>
                Returns the two intersection points between two circles.
            </summary>
      <param name="center1">The center1.</param>
      <param name="center2">The center2.</param>
      <param name="radius1">The radius1.</param>
      <param name="radius2">The radius2.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.ClipPolygons(System.Collections.Generic.List{Entropy.SDK.Prediction.ICPred.Geometry.Polygon})">
      <summary>
                Clips the polygons.
            </summary>
      <param name="polygons">The polygons.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Close(System.Single,System.Single,System.Single)">
      <summary>
                Checks if the two floats are close to each other.
            </summary>
      <param name="a">a.</param>
      <param name="b">The b.</param>
      <param name="eps">The epsilon.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Closest(SharpDX.Vector2,System.Collections.Generic.List{SharpDX.Vector2})">
      <summary>
                Returns the closest vector from a list.
            </summary>
      <param name="v">The v.</param>
      <param name="vList">The v list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.CrossProduct(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Returns the cross product Z value.
            </summary>
      <param name="self">The self.</param>
      <param name="other">The other.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.DegreeToRadian(System.Double)">
      <summary>
                Converts degrees to radians.
            </summary>
      <param name="angle">The angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Distance(Entropy.AIBaseClient,System.Boolean)">
      <summary>
                Calculates the 2D distance to the unit.
            </summary>
      <param name="anotherUnit">Another unit.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Distance(Entropy.AIBaseClient,Entropy.AIBaseClient,System.Boolean)">
      <summary>
                Calculates the 2D distance to the unit.
            </summary>
      <param name="unit">The unit.</param>
      <param name="anotherUnit">Another unit.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Distance(Entropy.AIBaseClient,Entropy.AttackableUnit,System.Boolean)">
      <summary>
                Calculates the 2D distance to the unit.
            </summary>
      <param name="unit">The unit.</param>
      <param name="anotherUnit">Another unit.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Distance(Entropy.AIBaseClient,SharpDX.Vector3,System.Boolean)">
      <summary>
                Calculates the 2D distance to the point.
            </summary>
      <param name="unit">The unit.</param>
      <param name="point">The point.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Distance(Entropy.AIBaseClient,SharpDX.Vector2,System.Boolean)">
      <summary>
                Calculates the 2D distance to the point.
            </summary>
      <param name="unit">The unit.</param>
      <param name="point">The point.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Distance(SharpDX.Vector3,SharpDX.Vector3,System.Boolean)">
      <summary>
                Returns the 2D distance (XY plane) between two vector.
            </summary>
      <param name="v">The v.</param>
      <param name="other">The other.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Distance(SharpDX.Vector2,SharpDX.Vector2,System.Boolean)">
      <summary>
                Calculates the distance to the Vector2.
            </summary>
      <param name="v">The v.</param>
      <param name="to">To.</param>
      <param name="squared">if set to <c>true</c> gets the distance squared.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Distance(SharpDX.Vector2,SharpDX.Vector3,System.Boolean)">
      <summary>
                Calculates the distance to the Vector3.
            </summary>
      <param name="v">The v.</param>
      <param name="to">To.</param>
      <param name="squared">if set to <c>true</c> gets the distance squared.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Distance(SharpDX.Vector2,Entropy.AIBaseClient,System.Boolean)">
      <summary>
                Calculates the distance to the unit.
            </summary>
      <param name="v">The v.</param>
      <param name="to">To.</param>
      <param name="squared">if set to <c>true</c> gets the distance squared.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Distance(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,System.Boolean,System.Boolean)">
      <summary>
                Returns the distance to the line segment.
            </summary>
      <param name="point">The point.</param>
      <param name="segmentStart">The segment start.</param>
      <param name="segmentEnd">The segment end.</param>
      <param name="onlyIfOnSegment">if set to <c>true</c> [only if on segment].</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Distance3D(Entropy.AIBaseClient,Entropy.AIBaseClient,System.Boolean)">
      <summary>
                Calculates the 3D distance to the unit.
            </summary>
      <param name="unit">The unit.</param>
      <param name="anotherUnit">Another unit.</param>
      <param name="squared">if set to <c>true</c> [squared].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Extend(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Extends the vector.
            </summary>
      <param name="v">The vector.</param>
      <param name="to">The vector to extend to</param>
      <param name="distance">The distance to extend.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Extend(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
      <summary>
                Extends the specified vector.
            </summary>
      <param name="v">The vector.</param>
      <param name="to">The vector to extend to.</param>
      <param name="distance">The distance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Intersection(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Intersects two line segments.
            </summary>
      <param name="lineSegment1Start">The line segment1 start.</param>
      <param name="lineSegment1End">The line segment1 end.</param>
      <param name="lineSegment2Start">The line segment2 start.</param>
      <param name="lineSegment2End">The line segment2 end.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.IsValid(SharpDX.Vector2)">
      <summary>
                Returns true if the vector is valid.
            </summary>
      <param name="v">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.IsValid(SharpDX.Vector3)">
      <summary>
                Determines whether this instance is valid.
            </summary>
      <param name="v">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.JoinPolygons(System.Collections.Generic.List{Entropy.SDK.Prediction.ICPred.Geometry.Polygon})">
      <summary>
                Joins all the polygones in the list in one polygone if they interect.
            </summary>
      <param name="sList">The polygon list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.JoinPolygons(System.Collections.Generic.List{Entropy.SDK.Prediction.ICPred.Geometry.Polygon},Entropy.SDK.ThirdParty.ClipType,Entropy.SDK.ThirdParty.PolyType,Entropy.SDK.ThirdParty.PolyFillType,Entropy.SDK.ThirdParty.PolyFillType)">
      <summary>
                Joins all the polygones.
                ClipType: http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/ClipType.htm
                PolyFillType: http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/PolyFillType.htm
            </summary>
      <param name="sList">The s list.</param>
      <param name="cType">Type of the c.</param>
      <param name="pType">Type of the p.</param>
      <param name="pFType1">The p f type1.</param>
      <param name="pFType2">The p f type2.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.MovePolygone(Entropy.SDK.Prediction.ICPred.Geometry.Polygon,SharpDX.Vector2)">
      <summary>
                Moves the polygone to the set position. It dosent rotate the polygone.
            </summary>
      <param name="polygon">The polygon.</param>
      <param name="moveTo">The move to.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Normalized(SharpDX.Vector2)">
      <summary>
                Returns the vector normalized.
            </summary>
      <param name="v">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Normalized(SharpDX.Vector3)">
      <summary>
                Normalizes the specified vector.
            </summary>
      <param name="v">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.PathLength(System.Collections.Generic.List{SharpDX.Vector2})">
      <summary>
                Returns the total distance of a path.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Perpendicular(SharpDX.Vector2)">
      <summary>
                Returns the perpendicular vector.
            </summary>
      <param name="v">The v.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Perpendicular2(SharpDX.Vector2)">
      <summary>
                Returns the second perpendicular vector.
            </summary>
      <param name="v">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Polar(SharpDX.Vector2)">
      <summary>
                Returns the polar for vector angle (in Degrees).
            </summary>
      <param name="v1">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.PositionAfter(System.Collections.Generic.List{SharpDX.Vector2},System.Int32,System.Int32,System.Int32)">
      <summary>
                Returns the position where the vector will be after t(time) with s(speed) and delay.
            </summary>
      <param name="self">The self.</param>
      <param name="t">The time.</param>
      <param name="s">The speed.</param>
      <param name="delay">The delay.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.ProjectOn(SharpDX.Vector2,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Returns the projection of the Vector2 on the segment.
            </summary>
      <param name="point">The point.</param>
      <param name="segmentStart">The segment start.</param>
      <param name="segmentEnd">The segment end.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.RadianToDegree(System.Double)">
      <summary>
                Converts radians to degrees.
            </summary>
      <param name="angle">The angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.RotateAroundPoint(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Rotates the vector around the set position.
                Angle is in radians.
            </summary>
      <param name="rotated">The rotated.</param>
      <param name="around">The around.</param>
      <param name="angle">The angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Rotated(SharpDX.Vector2,System.Single)">
      <summary>
                Rotates the vector a set angle (angle in radians).
            </summary>
      <param name="v">The vector.</param>
      <param name="angle">The angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.RotatePolygon(Entropy.SDK.Prediction.ICPred.Geometry.Polygon,SharpDX.Vector2,System.Single)">
      <summary>
                Rotates the polygon around the set position.
                Angle is in radians.
            </summary>
      <param name="polygon">The polygon.</param>
      <param name="around">The around.</param>
      <param name="angle">The angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.RotatePolygon(Entropy.SDK.Prediction.ICPred.Geometry.Polygon,SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Rotates the polygon around to the set direction.
            </summary>
      <param name="polygon">The polygon.</param>
      <param name="around">The around.</param>
      <param name="direction">The direction.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.SetZ(SharpDX.Vector3,System.Nullable{System.Single})">
      <summary>
                Sets the z.
            </summary>
      <param name="v">The v.</param>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Shorten(SharpDX.Vector2,SharpDX.Vector2,System.Single)">
      <summary>
                Shortens the specified vector.
            </summary>
      <param name="v">The vector.</param>
      <param name="to">The vector to shorten from.</param>
      <param name="distance">The distance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.Shorten(SharpDX.Vector3,SharpDX.Vector3,System.Single)">
      <summary>
                Shortens the specified vector.
            </summary>
      <param name="v">The vector.</param>
      <param name="to">The vector to shorten from.</param>
      <param name="distance">The distance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.SwitchYZ(SharpDX.Vector3)">
      <summary>
                Switches the Y and Z.
            </summary>
      <param name="v">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.To2D(SharpDX.Vector3)">
      <summary>
                Converts a Vector3 to Vector2
            </summary>
      <param name="v">The v.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.To2D(System.Collections.Generic.List{SharpDX.Vector3})">
      <summary>
                Converts a 3D path to 2D
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.To3D(SharpDX.Vector2)">
      <summary>
                Converts the Vector2 to Vector3. (Z = Player.Position.Z)
            </summary>
      <param name="v">The vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.ToPolygon(System.Collections.Generic.List{Entropy.SDK.ThirdParty.IntPoint})">
      <summary>
                Converts a list of <see cref="T:Entropy.SDK.ThirdParty.IntPoint" /> to a polygon.
            </summary>
      <param name="v">The int points.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.ToPolygons(System.Collections.Generic.List{System.Collections.Generic.List{Entropy.SDK.ThirdParty.IntPoint}})">
      <summary>
                Converts a list of list points to a polygon.
            </summary>
      <param name="v">The v.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Prediction.ICPred.Geometry.VectorMovementCollision(SharpDX.Vector2,SharpDX.Vector2,System.Single,SharpDX.Vector2,System.Single,System.Single)">
      <summary>
                Gets the vectors movement collision.
            </summary>
      <param name="startPoint1">The start point1.</param>
      <param name="endPoint1">The end point1.</param>
      <param name="v1">The v1.</param>
      <param name="startPoint2">The start point2.</param>
      <param name="v2">The v2.</param>
      <param name="delay">The delay.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Rendering.ArrowRendering.Render(SharpDX.Vector2,System.Single,System.Single,System.Boolean,System.Boolean)">
      <summary>
                Renders the arrow
            </summary>
      <param name="screenPosition">
      </param>
      <param name="scale">
      </param>
      <param name="lineWidth">
      </param>
      <param name="cycleRainbow">
      </param>
      <param name="left">
      </param>
    </member>
    <member name="T:Entropy.SDK.Rendering.CircleRendering2D">
      <summary>
                Class CircleRendering2D
            </summary>
    </member>
    <member name="T:Entropy.SDK.Rendering.TextureLoader">
      <inheritdoc />
      <summary>
                Safely load and convert bitmaps to textures which will automatically get disposed on AppDomain
                unload/exit.
                Primary advantage for this class is that it also reloads the textures on device resets.
            </summary>
    </member>
    <member name="P:Entropy.SDK.Rendering.TextureLoader.Item(System.String)">
      <summary>
                Returns the texture which is indexed by the given key
            </summary>
      <param name="key">The index key</param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextureLoader.Load(System.String,System.Drawing.Bitmap)">
      <summary>
                Loads and converts the given bitmap to a texture
            </summary>
      <param name="key">The index key</param>
      <param name="bitmap">The bitmap to convert and load</param>
      <returns>The loaded texture</returns>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextureLoader.Unload(System.String)">
      <summary>
                Unloads the texture which is associated with the index key from memory
            </summary>
      <param name="key">The index key</param>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.Rendering.CircleRendering">
      <summary>
                Class Circle
            </summary>
    </member>
    <member name="M:Entropy.SDK.Rendering.CircleRendering.Render(SharpDX.Color,System.Single,System.Single,SharpDX.Vector2)">
      <summary>
                Renders a 2D circle.
            </summary>
      <param name="color">The color.</param>
      <param name="radius">The radius.</param>
      <param name="thickness">The thickness.</param>
      <param name="screenPostion">The screen positions.</param>
    </member>
    <member name="M:Entropy.SDK.Rendering.CircleRendering.Render(SharpDX.Color,System.Single,System.Single,System.Boolean,SharpDX.Vector3[])">
      <summary>
                Renders a circle.
            </summary>
      <param name="color">The color.</param>
      <param name="radius">The radius.</param>
      <param name="thickness">The thickness.</param>
      <param name="filled">if set to <c>true</c> [filled].</param>
      <param name="worldPositions">The world positions.</param>
    </member>
    <member name="M:Entropy.SDK.Rendering.CircleRendering.Render(SharpDX.Color,System.Single,Entropy.GameObject,System.Single)">
      <summary>
                Renders a circle
            </summary>
      <param name="color">
      </param>
      <param name="radius">
      </param>
      <param name="obj">
      </param>
      <param name="thickness">
      </param>
    </member>
    <member name="M:Entropy.SDK.Rendering.CircleRendering.Render(SharpDX.Color,System.Single,SharpDX.Vector3,System.Single)">
      <summary>
                Renders a circle
            </summary>
      <param name="color">
      </param>
      <param name="radius">
      </param>
      <param name="pos">
      </param>
      <param name="thickness">
      </param>
    </member>
    <member name="M:Entropy.SDK.Rendering.DamageIndicatorRendering.Render(Entropy.AIBaseClient,System.Single,Entropy.DamageType,SharpDX.Color,System.Boolean)">
      <summary>
            Renders a damage indicator on the specified target.
            Provide damages before any calculation.
            </summary>
      <param name="target">
      </param>
      <param name="damage">
      </param>
      <param name="type">
      </param>
      <param name="forcedColor">
      </param>
      <param name="heal">
      </param>
    </member>
    <member name="T:Entropy.SDK.Rendering.LineRendering">
      <summary>
                Class Line
            </summary>
    </member>
    <member name="M:Entropy.SDK.Rendering.LineRendering.Render(SharpDX.Color,System.Single,SharpDX.Mathematics.Interop.RawVector2[])">
      <summary>
                Renders a line.
            </summary>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
      <param name="screenPositions">The screen positions.</param>
    </member>
    <member name="M:Entropy.SDK.Rendering.LineRendering.Render(SharpDX.Color,System.Single,SharpDX.Vector3[])">
      <summary>
                Renders a line.
            </summary>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
      <param name="worldPositions">The world positions.</param>
    </member>
    <member name="T:Entropy.SDK.Rendering.TextRendering">
      <summary>
                Class Text
            </summary>
    </member>
    <member name="F:Entropy.SDK.Rendering.TextRendering.DefaultFont">
      <summary>
                The default font used in rendering if no other font is specified
            </summary>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextRendering.Render(System.String,SharpDX.Color,SharpDX.Vector3[])">
      <summary>
                Renders text.
            </summary>
      <param name="content">The content.</param>
      <param name="color">The color.</param>
      <param name="worldPositions">The world positions.</param>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextRendering.Render(System.String,SharpDX.Color,SharpDX.Vector2[])">
      <summary>
                Renders text.
            </summary>
      <param name="content">The content.</param>
      <param name="color">The color.</param>
      <param name="screenPositions">The screen positions.</param>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextRendering.Render(System.String,SharpDX.Color,SharpDX.Direct3D9.FontDrawFlags,SharpDX.Rectangle[])">
      <summary>
                Renders text.
            </summary>
      <param name="content">The content.</param>
      <param name="color">The color.</param>
      <param name="flags">The flags.</param>
      <param name="rectangles">The rectangles.</param>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextRendering.Render(System.String,SharpDX.Color,SharpDX.Direct3D9.Font,SharpDX.Vector3[])">
      <summary>
                Renders text.
            </summary>
      <param name="content">The content.</param>
      <param name="color">The color.</param>
      <param name="font">The font.</param>
      <param name="worldPositions">The world positions.</param>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextRendering.Render(System.String,SharpDX.Color,SharpDX.Direct3D9.Font,SharpDX.Vector2[])">
      <summary>
                Renders text.
            </summary>
      <param name="content">The content.</param>
      <param name="color">The color.</param>
      <param name="font">The font.</param>
      <param name="screenPositions">The screen positions.</param>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextRendering.Render(System.String,SharpDX.Color,SharpDX.Direct3D9.Font,SharpDX.Direct3D9.FontDrawFlags,SharpDX.Rectangle[])">
      <summary>
                Renders text.
            </summary>
      <param name="content">The content.</param>
      <param name="color">The color.</param>
      <param name="font">The font.</param>
      <param name="flags">The flags.</param>
      <param name="rectangles">The rectangles.</param>
    </member>
    <member name="T:Entropy.SDK.Rendering.TextureRendering">
      <summary>
                Class Texture
            </summary>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextureRendering.Render(SharpDX.Vector2,SharpDX.Direct3D9.Texture)">
      <summary>
                Renders a sprite.
            </summary>
      <param name="position">The position.</param>
      <param name="texture">The texture.</param>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextureRendering.Render(SharpDX.Vector2,SharpDX.Direct3D9.Texture,System.Nullable{SharpDX.Rectangle})">
      <summary>
                Draws the sprite on the screen
            </summary>
      <param name="position">The position to draw at</param>
      <param name="texture">
      </param>
      <param name="rectangle">The rectangle to draw from</param>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextureRendering.Render(SharpDX.Vector2,SharpDX.Direct3D9.Texture,System.Single)">
      <summary>
                Renders a sprite.
            </summary>
      <param name="position">The position.</param>
      <param name="texture">The texture.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="M:Entropy.SDK.Rendering.TextureRendering.Render(SharpDX.Vector2,SharpDX.Direct3D9.Texture,SharpDX.Color,System.Nullable{SharpDX.Vector3},System.Nullable{SharpDX.Rectangle},System.Nullable{System.Single},System.Nullable{SharpDX.Vector2})">
      <summary>
                Renders a sprite.
            </summary>
      <param name="position">The position.</param>
      <param name="texture">The texture.</param>
      <param name="backgroundColor">The color.</param>
      <param name="center">The center.</param>
      <param name="rectangle">The rectangle.</param>
      <param name="rotation">The rotation.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="T:Entropy.SDK.Spells.Spell">
      <summary>
                Class Spell.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.#ctor(Entropy.SpellSlot,System.Single)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Spells.Spell" /> class.
            </summary>
      <param name="slot">The slot.</param>
      <param name="range">
      </param>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.IsSummoner">
      <summary>
            Determines whether the spell is a summoner spell
            </summary>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.SummonerType">
      <summary>
            Determines the summoner type of the spell
            </summary>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.Ammo">
      <summary>
                Gets the spell ammo.
            </summary>
      <value>The Ammo.</value>
            &gt;
        </member>
    <member name="F:Entropy.SDK.Spells.Spell.ChargedBuffName">
      <summary>
                Gets or sets the name of the charged buff.
            </summary>
      <value>The name of the charged buff.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.ChargedMaxRange">
      <summary>
                Gets or sets the charged maximum range.
            </summary>
      <value>The charged maximum range.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.ChargedMinRange">
      <summary>
                Gets or sets the charged minimum range.
            </summary>
      <value>The charged minimum range.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.ChargedSpellName">
      <summary>
                Gets or sets the name of the charged spell.
            </summary>
      <value>The name of the charged spell.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.ChargeDuration">
      <summary>
                Gets or sets the duration of the charge.
            </summary>
      <value>The duration of the charge.</value>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.ChargePercent">
      <summary>
                Gets the percentage the spell is charged up
            </summary>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.Collision">
      <summary>
                Gets or sets a value indicating whether this <see cref="T:Entropy.SDK.Spells.Spell" /> has collision.
            </summary>
      <value>
        <c>true</c> if the spell has collision; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.Cooldown">
      <summary>
                Gets the spell cooldown.
            </summary>
      <value>The Cooldown.</value>
            &gt;
        </member>
    <member name="P:Entropy.SDK.Spells.Spell.CooldownExpires">
      <summary>
                Gets the tick when the cooldown expires.
            </summary>
      <value>The CooldownEnd.</value>
            &gt;
        </member>
    <member name="P:Entropy.SDK.Spells.Spell.SpellDataCost">
      <summary>
                Gets the spell cost from SpellData.
            </summary>
      <value>The Cost.</value>
            &gt;
        </member>
    <member name="M:Entropy.SDK.Spells.Spell.Cost(Entropy.AIHeroClient)">
      <summary>
                Gets the spell cost from DDragon.
            </summary>
      <value>The Cost.</value>
            &gt;
        </member>
    <member name="F:Entropy.SDK.Spells.Spell.Delay">
      <summary>
                Gets or sets the delay.
            </summary>
      <value>The delay.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.AreaOfEffect">
      <summary>
                Gets or sets the AreaOfEffect bool.
            </summary>
      <value>The AreaOfEffect bool.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.MultiHit">
      <summary>
                Gets or sets the MultiHit bool.
            </summary>
      <value>The MultiHit bool.</value>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.From">
      <summary>
                Gets or sets the from.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.HitChance">
      <summary>
                Gets or sets the hit chance.
            </summary>
      <value>The hit chance.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.IsChargeSpell">
      <summary>
                Gets or sets a value indicating whether this instance is charged spell.
            </summary>
      <value>
        <c>true</c> if this instance is charged spell; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.IsCharging">
      <summary>
                Gets a value indicating whether this instance is charing.
            </summary>
      <value>
        <c>true</c> if this instance is charing; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.IsSkillShot">
      <summary>
                Gets or sets a value indicating whether this instance is skill shot.
            </summary>
      <value>
        <c>true</c> if this instance is skill shot; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.BoundingRadiusMod">
      <summary>
                Gets or sets a value indicating whether this instance uses bounding radius as extra radius modifier.
            </summary>
      <value>
        <c>true</c> if this instance uses bounding radius as extra radius modifier; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.DisableRadiusMod">
      <summary>
                Gets or sets a value indicating whether this instance uses radius as skillshot offset.
            </summary>
      <value>
        <c>true</c> if this instance uses radius as skillshot offset; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.LastCastAttempt">
      <summary>
                Gets the last time the spell was attempted to be casted.
                Result is in ticks (milliseconds)
            </summary>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.LastRelease">
      <summary>
            Gets the last time the spell was released (for charged spells).
            Result is in ticks (milliseconds)
            </summary>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.UsedWithin(System.Single)">
      <summary>
            Determines whether the spell was used within the last X ticks (milliseconds)
            </summary>
      <param name="time">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.CanExecute(Entropy.AIBaseClient)">
      <summary>
            Determines whether the spell can kill the specified unit
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.Level">
      <summary>
                Gets the spell level.
            </summary>
      <value>The Level.</value>
            &gt;
        </member>
    <member name="P:Entropy.SDK.Spells.Spell.Name">
      <summary>
                Gets the spell name.
            </summary>
      <value>The Name.</value>
            &gt;
        </member>
    <member name="P:Entropy.SDK.Spells.Spell.ToggleState">
      <summary>
                Returns the Toggle state of the spell
            </summary>
      <value>1 == Ready, 2 == Second stage of the spell.</value>
            &gt;
        </member>
    <member name="P:Entropy.SDK.Spells.Spell.Range">
      <summary>
                Gets or sets the range.
            </summary>
      <value>The range.</value>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.Ready">
      <summary>
                Gets a value indicating whether this <see cref="T:Entropy.SDK.Spells.Spell" /> is ready.
            </summary>
      <value>
        <c>true</c> if ready; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.TimeUntilReady">
      <summary>
            Determines the time in seconds until the spell is ready (off cooldown)
            </summary>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.Slot">
      <summary>
                Gets or sets the slot.
            </summary>
      <value>The slot.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.Speed">
      <summary>
                Gets or sets the speed.
            </summary>
      <value>The speed.</value>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.SpellData">
      <summary>
                Gets the spelldata (basic Spell.SpellData).
            </summary>
      <value>The SpellData.</value>
            &gt;
        </member>
    <member name="P:Entropy.SDK.Spells.Spell.State">
      <summary>
                Position the state of the spell
            </summary>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.Type">
      <summary>
                Gets or sets the type.
            </summary>
      <value>The type.</value>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.Width">
      <summary>
                Gets or sets the width.
            </summary>
      <value>The width.</value>
    </member>
    <member name="P:Entropy.SDK.Spells.Spell.RangeCheckFrom">
      <summary>
                Gets or sets the range check from.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.GetHitChance(Entropy.SpellSlot)">
      <summary>
            Gets the hitchance setting for the spell
            </summary>
      <param name="slot">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.Cast(Entropy.AIBaseClient,SharpDX.Vector3,Entropy.SDK.Enumerations.HitChance)">
      <summary>
                Casts the specified target.
            </summary>
      <returns>
        <c>true</c> if the spell was casted, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.IsInRange(Entropy.AIBaseClient,System.Single)">
      <summary>
            Determines whether the spell is in range of the specified target
            </summary>
      <param name="target">
      </param>
      <param name="additionalRange">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.IsInRange(SharpDX.Vector3)">
      <summary>
            Determines whether the spell is in range of the specified position
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.IsInRange(SharpDX.Vector2)">
      <summary>
            Determines whether the spell is in range of the specified position
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.Cast">
      <summary>
                Casts the spell.
            </summary>
      <returns>
        <c>true</c> if the spell was casted, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.TimeForSpellToReachTarget(Entropy.AttackableUnit)">
      <summary>
            Determines the time (in ticks/milliseconds) for the spell to reach the specified target
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.UpdateSourcePosition(SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
            Updates the position the spell is to be casted from
            </summary>
      <param name="fromVector3">
      </param>
      <param name="rangeCheckFromVector3">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.TimeForSpellToReachTarget(SharpDX.Vector3)">
      <summary>
            Determines the time (in ticks/milliseconds) for the spell to reach the specified position
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.GetCircleCircleIntersection(Entropy.AIBaseClient,System.Single,System.Single)">
      <summary>
            Determines the intersection points between the player with the specified attack range
            (or otherwise, the player's auto attack range on the specified target), and the specified target with the
            specified dash range (or otherwise, the spell's range)
            </summary>
      <param name="target">
      </param>
      <param name="attackRange">
      </param>
      <param name="dashRange">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.Cast(SharpDX.Vector2)">
      <summary>
                Casts the spell at the specified position.
            </summary>
      <param name="position">The position.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.Cast(SharpDX.Vector3)">
      <summary>
                Casts the spell at the specified position.
            </summary>
      <param name="position">The position.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.Cast(SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
                Casts a Vector spell at a specified start position to a specified end position.
            </summary>
      <param name="start">The start position.</param>
      <param name="end">The end position.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.Cast(SharpDX.Vector2,SharpDX.Vector2)">
      <summary>
                Casts a Vector spell at a specified start position to a specified end position.
            </summary>
      <param name="start">The start position.</param>
      <param name="end">The end position.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.CastOnUnit(Entropy.AttackableUnit)">
      <summary>
                Casts the on unit.
            </summary>
      <param name="obj">The object.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.CastIfWillHit(Entropy.AIBaseClient,System.Int32)">
      <summary>
                Casts the spell if it will hit at least <paramref name="minTargets" />.
            </summary>
      <param name="target">The unit to cast on.</param>
      <param name="minTargets">The minimum number of targets to hit.</param>
      <returns>
        <c>true</c> if the spell was casted; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.GetPrediction(Entropy.AIBaseClient,System.Nullable{SharpDX.Vector3},System.Nullable{SharpDX.Vector3})">
      <summary>
                Gets the prediction.
            </summary>
      <param name="target">The target.</param>
      <param name="origin">The position to cast the spell from.</param>
      <param name="sRangeCheckFrom">The position to check the range from.</param>
      <returns>PredictionOutput.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.SetDamageType(Entropy.DamageType)">
      <summary>
                Sets spell's damage type
            </summary>
      <param name="type">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.GetDamageType">
      <summary>
                Gets spell's damage type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.SetBaseDamage(System.Single[])">
      <summary>
                Sets spell's base damage
            </summary>
      <param name="baseDamageArray">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.SetAttackDamageMultiplier(System.Single[])">
      <summary>
                Setts spell's attack damage multiplier
            </summary>
      <param name="attackDamageArray">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.SetAbilityDamageMultiplier(System.Single[])">
      <summary>
                Setts spell's ability damage multiplier
            </summary>
      <param name="abilityDamageArray">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.SetBonusAttackDamageMultiplier(System.Single[])">
      <summary>
                Setts spell's bonus attack damage multiplier
            </summary>
      <param name="bonusAttackDamageArray">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.SetBonusAbilityDamageMultiplier(System.Single[])">
      <summary>
                Setts spell's bonus ability damage multiplier
            </summary>
      <param name="bonusAbilityDamageArray">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.SetMaxHPDamageMultiplier(System.Single[])">
      <summary>
                Setts spell's max HP damage multiplier
            </summary>
      <param name="hpDamageArray">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.SetCustomDamageCalculateFunction(Entropy.SDK.Spells.Spell.DamageCalculateDelegate)">
      <summary>
                Sets custom damage calculation formula
            </summary>
      <param name="customFunction">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.GetDamage(Entropy.AIBaseClient)">
      <summary>
                Gets spell's damage
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.GetPredictionInput(Entropy.AIBaseClient,SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
                Gets the prediction input.
            </summary>
      <param name="target">The target.</param>
      <param name="fromPosition">The position to cast the spell from.</param>
      <param name="rangeCheckFromPosition">The position to check the range from.</param>
      <returns>PredictionInput.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.SetCharged(System.String,System.String,System.Int32,System.Int32,System.Single)">
      <summary>
                Sets the charged.
            </summary>
      <param name="spellName">Name of the spell.</param>
      <param name="buffName">Name of the buff.</param>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
      <param name="chargeDurationSeconds">The charge duration in seconds.</param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.SetSkillshot(System.Single,System.Single,System.Single,Entropy.SDK.Enumerations.SkillshotType,System.Boolean,Entropy.SDK.Enumerations.HitChance,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
                Sets the skillshot.
            </summary>
      <param name="delay">The delay.</param>
      <param name="width">The width.</param>
      <param name="speed">The speed.</param>
      <param name="collision">if set to <c>true</c> the spell has collision.</param>
      <param name="type">The type.</param>
      <param name="HitChance">The HitChance.</param>
      <param name="sRangeCheckFrom">Range check from.</param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.ShootChargedSpell(SharpDX.Vector3,System.Boolean,System.Single)">
      <summary>
                Shoots the charged spell
            </summary>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.StartCharging(SharpDX.Vector3)">
      <summary>
                Starts charging the spell
            </summary>
    </member>
    <member name="T:Entropy.SDK.Spells.Spell.FarmLocation">
      <summary>
                A struct that represents the best position to cast a skillshot to hit the best number of minions, as well
                as the
                number of minions hit.
            </summary>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.FarmLocation.MinionsHit">
      <summary>
                The minions hit
            </summary>
    </member>
    <member name="F:Entropy.SDK.Spells.Spell.FarmLocation.Position">
      <summary>
                The position
            </summary>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.FarmLocation.#ctor(SharpDX.Vector2,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.Spells.Spell.FarmLocation" /> struct.
            </summary>
      <param name="position">The position.</param>
      <param name="minionsHit">The minions hit.</param>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.GetLineFarmLocation(System.Collections.Generic.IEnumerable{Entropy.AIMinionClient},System.Single)">
      <summary>
                Gets the line farm location.
            </summary>
      <param name="minions">The minions.</param>
      <param name="overrideWidth">Width of the override.</param>
      <returns>MinionManager.FarmLocation.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Spell.GetCircularFarmLocation(System.Collections.Generic.IEnumerable{Entropy.AIMinionClient},System.Single)">
      <summary>
                Gets the circular farm location.
            </summary>
      <param name="minions">The minions.</param>
      <param name="overrideWidth">Width of the override.</param>
      <returns>MinionManager.FarmLocation.</returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Item.Cast">
      <summary>
            Casts the item
            </summary>
    </member>
    <member name="M:Entropy.SDK.Spells.Item.Cast(Entropy.AIBaseClient)">
      <summary>
            Casts the item on the specified target
            </summary>
      <param name="target">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Item.Cast(SharpDX.Vector3)">
      <summary>
            Casts the item on the specified position
            </summary>
      <param name="target">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Item.Cast(SharpDX.Vector3,SharpDX.Vector3)">
      <summary>
            Casts the item on the specified start and end positions
            </summary>
      <param name="start">
      </param>
      <param name="end">
      </param>
    </member>
    <member name="M:Entropy.SDK.Spells.Item.IsInRange(Entropy.GameObject)">
      <summary>
                Determines whether position is in range of the specified target
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Spells.Item.IsInRange(SharpDX.Vector3)">
      <summary>
                Determines whether position is in range of the specified position
            </summary>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Entropy.SDK.TS.TargetSelector.OrderedTargets">
      <summary>
                List containing ordered targets
            </summary>
    </member>
    <member name="P:Entropy.SDK.TS.TargetSelector.SelectedTarget">
      <summary>
                Gets or sets the manually selected target
            </summary>
    </member>
    <member name="M:Entropy.SDK.TS.TargetSelector.GetBestTarget(System.Single)">
      <summary>
                Gets the best possible target
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.TS.TargetSelector.GetBestTargetsList(System.Single)">
      <summary>
                Gets a list containing ordered best targets
            </summary>
      <param name="range">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.UI.Components.MenuColor">
      <summary>
                Class MenuBool. This class cannot be inherited.
            </summary>
      <seealso cref="T:Entropy.SDK.UI.MenuComponent" />
      <seealso cref="T:System.Boolean" />
    </member>
    <member name="M:Entropy.SDK.UI.Components.MenuColor.#ctor(System.String,System.String,SharpDX.Color,System.Boolean)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.UI.Components.MenuColor" /> class with an MenuBool.
            </summary>
      <param name="internalName">The display name.</param>
      <param name="displayName">The display name.</param>
      <param name="defaultColor">
      </param>
      <param name="defaultHasCheckBoxValue">
      </param>
    </member>
    <member name="M:Entropy.SDK.UI.Components.MenuColor.#ctor(System.String,System.String,SharpDX.Color)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.UI.Components.MenuColor" /> class.
            </summary>
      <param name="internalName">The display name.</param>
      <param name="displayName">The display name.</param>
      <param name="defaultColor">
      </param>
    </member>
    <member name="T:Entropy.SDK.UI.Components.MenuBool">
      <summary>
                Class MenuBool. This class cannot be inherited.
            </summary>
      <seealso cref="T:Entropy.SDK.UI.MenuComponent" />
      <seealso cref="T:System.Boolean" />
    </member>
    <member name="M:Entropy.SDK.UI.Components.MenuBool.#ctor(System.String,System.String,System.Boolean)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.UI.Components.MenuBool" /> class.
            </summary>
      <param name="internalName">The display name.</param>
      <param name="displayName">The display name.</param>
      <param name="enabled">if set to <c>true</c> [enabled].</param>
    </member>
    <member name="T:Entropy.SDK.UI.Components.MenuKeyBind">
      <summary>
                Class MenuKeybind. This class cannot be inherited.
            </summary>
      <seealso cref="T:Entropy.SDK.UI.MenuComponent" />
      <seealso cref="T:System.Boolean" />
    </member>
    <member name="M:Entropy.SDK.UI.Components.MenuKeyBind.#ctor(System.String,System.String,Entropy.WindowMessageWParam,Entropy.SDK.UI.Components.KeybindType,System.Boolean,System.Boolean)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.UI.Components.MenuKeyBind" /> class.
            </summary>
      <param name="internalName">The internal name.</param>
      <param name="displayName">The display name.</param>
      <param name="key">The key.</param>
      <param name="keybindType">Type of the keybind.</param>
      <param name="active">Whether this item should be active by default</param>
      <param name="shared">Whether this item is shared across instances</param>
    </member>
    <member name="P:Entropy.SDK.UI.Components.MenuKeyBind.Key">
      <summary>
                Gets or sets the key.
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Entropy.SDK.UI.Components.MenuKeyBind.KeybindType">
      <summary>
                Gets or sets the type of the keybind.
            </summary>
      <value>The type of the keybind.</value>
    </member>
    <member name="T:Entropy.SDK.UI.Components.KeybindType">
      <summary>
                Enum KeybindType
            </summary>
    </member>
    <member name="F:Entropy.SDK.UI.Components.KeybindType.Hold">
      <summary>
                Hold key bind.
            </summary>
    </member>
    <member name="F:Entropy.SDK.UI.Components.KeybindType.Toggle">
      <summary>
                Toggle key bind.
            </summary>
    </member>
    <member name="T:Entropy.SDK.UI.Components.MenuList">
      <summary>
                Class MenuList.
            </summary>
      <seealso cref="T:Entropy.SDK.UI.MenuComponent" />
    </member>
    <member name="M:Entropy.SDK.UI.Components.MenuList.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.UI.Components.MenuList" /> class.
            </summary>
      <param name="internalName">The Internal Name.</param>
      <param name="displayName">The Displayed Name</param>
      <param name="items">The items.</param>
      <param name="selectedValue">The selected value.</param>
      <exception cref="T:System.ArgumentException">selectedValue</exception>
      <param name="shared">Whether this item is shared across instances</param>
    </member>
    <member name="P:Entropy.SDK.UI.Components.MenuList.Items">
      <summary>
                Gets or sets the items.
            </summary>
      <value>The items.</value>
    </member>
    <member name="P:Entropy.SDK.UI.Components.MenuList.SelectedItem">
      <summary>
                Gets the selected item.
            </summary>
      <value>The selected item.</value>
    </member>
    <member name="T:Entropy.SDK.UI.Components.MenuSlider">
      <inheritdoc />
      <summary>
                Class MenuSlider. This class cannot be inherited.
            </summary>
      <seealso cref="T:Entropy.SDK.UI.MenuComponent" />
      <seealso cref="T:System.Int32" />
    </member>
    <member name="M:Entropy.SDK.UI.Components.MenuSlider.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.UI.Components.MenuSlider" /> class.
            </summary>
      <param name="internalName">The internal name.</param>
      <param name="displayName">The display name.</param>
      <param name="value">The value.</param>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <param name="shared">Whether this item is shared across instances</param>
    </member>
    <member name="F:Entropy.SDK.UI.Components.MenuSlider.MaxValue">
      <summary>
                Gets or sets the maximum value.
            </summary>
      <value>The maximum value.</value>
    </member>
    <member name="F:Entropy.SDK.UI.Components.MenuSlider.MinValue">
      <summary>
                Gets or sets the minimum value.
            </summary>
      <value>The minimum value.</value>
    </member>
    <member name="T:Entropy.SDK.UI.Components.MenuSliderBool">
      <summary>
                Class MenuSliderBool. This class cannot be inherited.
            </summary>
      <seealso cref="T:Entropy.SDK.UI.MenuComponent" />
      <seealso cref="T:System.Int32" />
    </member>
    <member name="M:Entropy.SDK.UI.Components.MenuSliderBool.#ctor(System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Int32)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.UI.Components.MenuSliderBool" /> class.
            </summary>
      <param name="internalName">The internal name.</param>
      <param name="displayName">The display name.</param>
      <param name="enabled">Whether this is enabled by default</param>
      <param name="value">The value.</param>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
    </member>
    <member name="P:Entropy.SDK.UI.Components.MenuSliderBool.MaxValue">
      <summary>
                Gets or sets the maximum value.
            </summary>
      <value>The maximum value.</value>
    </member>
    <member name="P:Entropy.SDK.UI.Components.MenuSliderBool.MinValue">
      <summary>
                Gets or sets the minimum value.
            </summary>
      <value>The minimum value.</value>
    </member>
    <member name="T:Entropy.SDK.UI.MenuComponent">
      <summary>
                Class MenuComponent.
            </summary>
    </member>
    <member name="P:Entropy.SDK.UI.MenuComponent.DisplayName">
      <inheritdoc />
    </member>
    <member name="P:Entropy.SDK.UI.MenuComponent.InternalName">
      <inheritdoc />
    </member>
    <member name="P:Entropy.SDK.UI.MenuComponent.Parent">
      <inheritdoc />
    </member>
    <member name="F:Entropy.SDK.UI.MenuComponent.Value">
      <summary>
                Gets or sets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="M:Entropy.SDK.UI.MenuComponent.As``1">
      <inheritdoc />
    </member>
    <member name="M:Entropy.SDK.UI.MenuComponent.Dispose">
      <summary>
                Removes this component from its parent menu
            </summary>
    </member>
    <member name="M:Entropy.SDK.UI.MenuComponent.SetToolTip(System.String)">
      <summary>
                Sets the Tool Tip
            </summary>
      <param name="toolTip">The tooltip</param>
    </member>
    <member name="M:Entropy.SDK.UI.CustomComponents.MenuCustomWhitelist.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>
                Creates a whitelist of the Boolean type
            </summary>
      <param name="name">
      </param>
      <param name="values">
      </param>
      <param name="defValue">
      </param>
    </member>
    <member name="M:Entropy.SDK.UI.CustomComponents.MenuCustomWhitelist.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Int32)">
      <summary>
                Creates a whitelist of the Slider type
            </summary>
      <param name="name">
      </param>
      <param name="values">
      </param>
      <param name="defValue">
      </param>
      <param name="defaultMinValue">
      </param>
      <param name="defaultMaxValue">
      </param>
    </member>
    <member name="M:Entropy.SDK.UI.CustomComponents.MenuCustomWhitelist.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Int32,System.Int32,System.Int32)">
      <summary>
                Creates a whitelist of the SliderBool type
            </summary>
      <param name="name">
      </param>
      <param name="defIntValue">
      </param>
      <param name="defaultMinValue">
      </param>
      <param name="defaultMaxValue">
      </param>
      <param name="values">
      </param>
      <param name="defBoolValue">
      </param>
    </member>
    <member name="M:Entropy.SDK.UI.CustomComponents.MenuCustomWhitelist.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},Entropy.SDK.UI.CustomComponents.MenuWhitelistValueType)">
      <summary>
                Dynamic constructor
            </summary>
      <param name="name">
      </param>
      <param name="values">
      </param>
      <param name="valueType">
      </param>
    </member>
    <member name="M:Entropy.SDK.UI.CustomComponents.MenuJungleWhitelist.#ctor(System.String)">
      <summary>
                Creates a whitelist of the Boolean type
            </summary>
      <param name="name">
      </param>
      <param name="defValue">
      </param>
    </member>
    <member name="M:Entropy.SDK.UI.CustomComponents.MenuWhitelist.#ctor(System.String,Entropy.SDK.UI.CustomComponents.MenuWhitelistType,System.Boolean)">
      <summary>
                Creates a whitelist of the Boolean type
            </summary>
      <param name="name">
      </param>
      <param name="type">
      </param>
      <param name="defValue">
      </param>
    </member>
    <member name="M:Entropy.SDK.UI.CustomComponents.MenuWhitelist.#ctor(System.String,Entropy.SDK.UI.CustomComponents.MenuWhitelistType,System.Int32,System.Int32,System.Int32)">
      <summary>
                Creates a whitelist of the Slider type
            </summary>
      <param name="name">
      </param>
      <param name="type">
      </param>
      <param name="defValue">
      </param>
      <param name="defaultMinValue">
      </param>
      <param name="defaultMaxValue">
      </param>
    </member>
    <member name="M:Entropy.SDK.UI.CustomComponents.MenuWhitelist.#ctor(System.String,Entropy.SDK.UI.CustomComponents.MenuWhitelistType,System.Boolean,System.Int32,System.Int32,System.Int32)">
      <summary>
                Creates a whitelist of the SliderBool type
            </summary>
      <param name="name">
      </param>
      <param name="type">
      </param>
      <param name="defIntValue">
      </param>
      <param name="defaultMinValue">
      </param>
      <param name="defaultMaxValue">
      </param>
      <param name="defBoolValue">
      </param>
    </member>
    <member name="M:Entropy.SDK.UI.CustomComponents.MenuWhitelist.#ctor(System.String,Entropy.SDK.UI.CustomComponents.MenuWhitelistValueType,Entropy.SDK.UI.CustomComponents.MenuWhitelistType)">
      <summary>
                Dynamic constructor
            </summary>
      <param name="name">
      </param>
      <param name="valueType">
      </param>
      <param name="type">
      </param>
    </member>
    <member name="T:Entropy.SDK.UI.EventArgs.ColorValueChangedArgs">
      <summary>
                The Arguments for ValueChanged Event
            </summary>
    </member>
    <member name="M:Entropy.SDK.UI.EventArgs.ColorValueChangedArgs.#ctor(System.String,SharpDX.Color)">
      <summary>
                Creates a new instance of the ValueChangedArgs class
            </summary>
      <param name="internalName">
      </param>
      <param name="newVal">
      </param>
    </member>
    <member name="P:Entropy.SDK.UI.EventArgs.ColorValueChangedArgs.InternalName">
      <summary>
                The internal name of the Menu Component that fired this event
            </summary>
    </member>
    <member name="T:Entropy.SDK.UI.EventArgs.KeyValueChangedArgs">
      <summary>
                The Arguments for ValueChanged Event
            </summary>
    </member>
    <member name="M:Entropy.SDK.UI.EventArgs.KeyValueChangedArgs.#ctor(System.String,Entropy.WindowMessageWParam,Entropy.WindowMessageWParam)">
      <summary>
                Creates a new instance of the ValueChangedArgs class
            </summary>
      <param name="oldVal">
      </param>
      <param name="newVal">
      </param>
    </member>
    <member name="P:Entropy.SDK.UI.EventArgs.KeyValueChangedArgs.InternalName">
      <summary>
                The internal name of the Menu Component that fired this event
            </summary>
    </member>
    <member name="T:Entropy.SDK.UI.EventArgs.IntValueChangedArgs">
      <summary>
                The Arguments for ValueChanged Event
            </summary>
    </member>
    <member name="M:Entropy.SDK.UI.EventArgs.IntValueChangedArgs.#ctor(System.String,System.Int32)">
      <summary>
                Creates a new instance of the ValueChangedArgs class
            </summary>
      <param name="internalName">
      </param>
      <param name="newVal">
      </param>
    </member>
    <member name="P:Entropy.SDK.UI.EventArgs.IntValueChangedArgs.InternalName">
      <summary>
                The internal name of the Menu Component that fired this event
            </summary>
    </member>
    <member name="T:Entropy.SDK.UI.EventArgs.BoolValueChangedArgs">
      <summary>
                The Arguments for ValueChanged Event
            </summary>
    </member>
    <member name="M:Entropy.SDK.UI.EventArgs.BoolValueChangedArgs.#ctor(System.String,System.Boolean)">
      <summary>
                Creates a new instance of the ValueChangedArgs class
            </summary>
      <param name="internalName">
      </param>
      <param name="newVal">
      </param>
    </member>
    <member name="P:Entropy.SDK.UI.EventArgs.BoolValueChangedArgs.InternalName">
      <summary>
                The internal name of the Menu Component that fired this event
            </summary>
    </member>
    <member name="M:Entropy.SDK.UI.PermaShow.PermaShowManager.Permashow(Entropy.SDK.UI.MenuComponent,SharpDX.Color)">
      <summary>
            Attaches the specified menu component to the permashow
            </summary>
      <param name="component">
      </param>
      <param name="customColor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.UI.PermaShow.PermaShowManager.Permashow(Entropy.SDK.UI.MenuComponent,System.String,System.Boolean,SharpDX.Color)">
      <summary>
            Attaches the specified menu component to the permashow
            </summary>
      <param name="component">
      </param>
      <param name="customName">
      </param>
      <param name="center">
      </param>
      <param name="customColor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Entropy.SDK.UI.Menu">
      <inheritdoc />
      <summary>
                Class Menu.
            </summary>
      <seealso cref="T:System.Collections.IEnumerable" />
    </member>
    <member name="M:Entropy.SDK.UI.Menu.#ctor(System.String,System.String,System.Boolean)">
      <summary>
                Initializes a new instance of the <see cref="T:Entropy.SDK.UI.Menu" /> class.
            </summary>
      <param name="internalName">Name of the internal.</param>
            z
            <param name="displayName">The display name.</param><param name="isRoot">Whether this Menu is a root menu</param></member>
    <member name="M:Entropy.SDK.UI.Menu.Add(Entropy.SDK.UI.MenuComponent)">
      <summary>
                Adds the specified identifier.
            </summary>
      <param name="menuComponent">The menu.</param>
      <returns>IMenu.</returns>
    </member>
    <member name="M:Entropy.SDK.UI.Menu.Attach">
      <summary>
                Attaches this instance.
            </summary>
      <returns>IMenu.</returns>
    </member>
    <member name="M:Entropy.SDK.UI.Menu.GetEnumerator">
      <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the
                collection.
            </returns>
    </member>
    <member name="T:Entropy.SDK.Utils.DelayAction">
      <summary>
                Runs actions at a later time.
            </summary>
    </member>
    <member name="M:Entropy.SDK.Utils.DelayAction.Queue(System.Action,System.Int32)">
      <summary>
                Queues the action to be run after a specified time.
            </summary>
      <param name="action">The action.</param>
      <param name="milliseconds">The time time to delay in milliseconds.</param>
      <returns>A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the action.</returns>
    </member>
    <member name="M:Entropy.SDK.Utils.DelayAction.Queue(System.Action,System.Single)">
      <summary>
                Queues the action to be run after a specified time.
            </summary>
      <param name="action">The action.</param>
      <param name="milliseconds">The time time to delay in milliseconds.</param>
      <returns>A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the action.</returns>
    </member>
    <member name="M:Entropy.SDK.Utils.FontFactory.CreateNewFont(SharpDX.Direct3D9.FontDescription)">
      <summary>
            Safely creates a new font
            </summary>
      <param name="description">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Utils.FontFactory.CreateNewFont(System.Int32,SharpDX.Direct3D9.FontWeight,System.String)">
      <summary>
            Safely creates a new font
            </summary>
      <param name="height">
      </param>
      <param name="weight">
      </param>
      <param name="faceName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Utils.FontFactory.CreateNewFont(System.Int32,System.String,SharpDX.Direct3D9.FontWeight)">
      <summary>
            Safely creates a new font
            </summary>
      <param name="height">
      </param>
      <param name="faceName">
      </param>
      <param name="weight">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Utils.ItemUtility.HasTearItem(Entropy.AIHeroClient)">
      <summary>
                Checks if unit has Tear of The Goddess, Manamune, ArchangelsStaff or ...QuickCharge
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Entropy.SDK.Helpers.GameConsoleHelper.PrettyPrint(System.String,System.Boolean,System.Boolean,System.Drawing.Color)">
      <summary>
                Formats printing in the chat
            </summary>
      <param name="message">
      </param>
      <param name="bold">
      </param>
      <param name="underline">
      </param>
      <param name="color">
      </param>
    </member>
    <member name="M:Entropy.SDK.Helpers.GameConsoleHelper.PrettyPrint(System.String,System.Boolean,System.Boolean)">
      <summary>
                Formats printing in the chat
            </summary>
      <param name="message">
      </param>
      <param name="bold">
      </param>
      <param name="underline">
      </param>
    </member>
    <member name="M:Entropy.SDK.Helpers.GameConsoleOutputFormatter.AppendColoredText(System.String,System.Drawing.Color)">
      <summary>
                Insert a colored text
            </summary>
    </member>
    <member name="M:Entropy.SDK.Helpers.GameConsoleOutputFormatter.AppendLine(System.String)">
      <summary>
                Insert a newline
            </summary>
    </member>
    <member name="M:Entropy.SDK.Helpers.GameConsoleOutputFormatter.AppendStrokedLine(System.String)">
      <summary>
                Insert a stroked newline
            </summary>
    </member>
    <member name="M:Entropy.SDK.Helpers.GameConsoleOutputFormatter.AppendStrokedText(System.String)">
      <summary>
                Insert a stroked newline
            </summary>
    </member>
    <member name="M:Entropy.SDK.Helpers.GameConsoleOutputFormatter.AppendText(System.String)">
      <summary>
                Appends Text
            </summary>
      <param name="text">
      </param>
    </member>
    <member name="M:Entropy.SDK.Helpers.GameConsoleOutputFormatter.AppendUnderlinedLine(System.String)">
      <summary>
                Insert a Underlined newline
            </summary>
    </member>
    <member name="M:Entropy.SDK.Helpers.GameConsoleOutputFormatter.AppendUnderlinedText(System.String)">
      <summary>
                Insert a Underlined text
            </summary>
    </member>
    <member name="M:Entropy.SDK.Helpers.GameConsoleOutputFormatter.Print">
      <summary>
                Prints the formatted text to the game chat
            </summary>
    </member>
    <member name="P:Entropy.SDK.TacticalMapHelper.TacticalMapRectangle">
      <summary>
            Gets a rectangle that covers the tactical map (minimap)
            </summary>
    </member>
    <member name="P:Entropy.SDK.TacticalMapHelper.TacticalMapMultiplicator">
      <summary>
            Gets the factor that world distance must be multiplied by in order to get the tactical map distance
            </summary>
    </member>
    <member name="T:Entropy.SDK.ThirdParty.Easings.Functions">
      <summary>
                Easing Functions enumeration
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.BackEaseIn(System.Double)">
      <summary>
                Modeled after the overshooting cubic y = x^3-x*sin(x*pi)
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.BackEaseInOut(System.Double)">
      <summary>
                Modeled after the piecewise overshooting cubic function:
                y = (1/2)*((2x)^3-(2x)*sin(2*x*pi))          [0, 0.5)
                y = (1/2)*(1-((1-x)^3-(1-x)*sin((1-x)*pi))+1)[0.5, 1]
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.BackEaseOut(System.Double)">
      <summary>
                Modeled after overshooting cubic y = 1-((1-x)^3-(1-x)*sin((1-x)*pi))
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.BounceEaseIn(System.Double)">
      <summary>
      </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.BounceEaseInOut(System.Double)">
      <summary>
      </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.BounceEaseOut(System.Double)">
      <summary>
      </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.CircularEaseIn(System.Double)">
      <summary>
                Modeled after shifted quadrant IV of unit circle
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.CircularEaseInOut(System.Double)">
      <summary>
                Modeled after the piecewise circular function
                y = (1/2)(1 - Math.Sqrt(1 - 4x^2))          [0, 0.5)
                y = (1/2)(Math.Sqrt(-(2x - 3)*(2x - 1)) + 1)[0.5, 1]
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.CircularEaseOut(System.Double)">
      <summary>
                Modeled after shifted quadrant II of unit circle
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.CubicEaseIn(System.Double)">
      <summary>
                Modeled after the cubic y = x^3
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.CubicEaseInOut(System.Double)">
      <summary>
                Modeled after the piecewise cubic
                y = (1/2)((2x)^3)      [0, 0.5)
                y = (1/2)((2x-2)^3 + 2)[0.5, 1]
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.CubicEaseOut(System.Double)">
      <summary>
                Modeled after the cubic y = (x - 1)^3 + 1
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.ElasticEaseIn(System.Double)">
      <summary>
                Modeled after the damped sine wave y = sin(13pi/2*x)*Math.Pow(2, 10 * (x - 1))
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.ElasticEaseInOut(System.Double)">
      <summary>
                Modeled after the piecewise exponentially-damped sine wave:
                y = (1/2)*sin(13pi/2*(2*x))*Math.Pow(2, 10 * ((2*x) - 1))     [0,0.5)
                y = (1/2)*(sin(-13pi/2*((2x-1)+1))*Math.Pow(2,-10(2*x-1)) + 2)[0.5, 1]
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.ElasticEaseOut(System.Double)">
      <summary>
                Modeled after the damped sine wave y = sin(-13pi/2*(x + 1))*Math.Pow(2, -10x) + 1
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.ExponentialEaseIn(System.Double)">
      <summary>
                Modeled after the exponential function y = 2^(10(x - 1))
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.ExponentialEaseInOut(System.Double)">
      <summary>
                Modeled after the piecewise exponential
                y = (1/2)2^(10(2x - 1))        [0,0.5)
                y = -(1/2)*2^(-10(2x - 1))) + 1[0.5,1]
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.ExponentialEaseOut(System.Double)">
      <summary>
                Modeled after the exponential function y = -2^(-10x) + 1
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.Interpolate(System.Double,Entropy.SDK.ThirdParty.Easings.Functions)">
      <summary>
                Interpolate using the specified function.
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.Linear(System.Double)">
      <summary>
                Modeled after the line y = x
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.QuadraticEaseIn(System.Double)">
      <summary>
                Modeled after the parabola y = x^2
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.QuadraticEaseInOut(System.Double)">
      <summary>
                Modeled after the piecewise quadratic
                y = (1/2)((2x)^2)            [0, 0.5)
                y = -(1/2)((2x-1)*(2x-3) - 1)[0.5, 1]
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.QuadraticEaseOut(System.Double)">
      <summary>
                Modeled after the parabola y = -x^2 + 2x
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.QuarticEaseIn(System.Double)">
      <summary>
                Modeled after the quartic x^4
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Entropy.SDK.ThirdParty.Easings.QuarticEaseInOut(System.Double)" -->
    <member name="M:Entropy.SDK.ThirdParty.Easings.QuarticEaseOut(System.Double)">
      <summary>
                Modeled after the quartic y = 1 - (x - 1)^4
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.QuinticEaseIn(System.Double)">
      <summary>
                Modeled after the quintic y = x^5
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.QuinticEaseInOut(System.Double)">
      <summary>
                Modeled after the piecewise quintic
                y = (1/2)((2x)^5)      [0, 0.5)
                y = (1/2)((2x-2)^5 + 2)[0.5, 1]
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.QuinticEaseOut(System.Double)">
      <summary>
                Modeled after the quintic y = (x - 1)^5 + 1
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.SineEaseIn(System.Double)">
      <summary>
                Modeled after quarter-cycle of sine wave
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.SineEaseInOut(System.Double)">
      <summary>
                Modeled after half sine wave
            </summary>
    </member>
    <member name="M:Entropy.SDK.ThirdParty.Easings.SineEaseOut(System.Double)">
      <summary>
                Modeled after quarter-cycle of sine wave (different phase)
            </summary>
    </member>
  </members>
</doc>